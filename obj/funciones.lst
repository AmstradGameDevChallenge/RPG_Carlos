                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (CYGWIN)
                              4 ;--------------------------------------------------------
                              5 	.module funciones
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _drawPotion
                             12 	.globl _defender
                             13 	.globl _atacar
                             14 	.globl _printConsole
                             15 	.globl _printLevel
                             16 	.globl _printStats
                             17 	.globl _dibujarEscenario
                             18 	.globl _dibujarMarcoInterior
                             19 	.globl _dibujarMarcoExterior
                             20 	.globl _pausaTecladoLibre
                             21 	.globl _efecto_pliegue
                             22 	.globl _pausa
                             23 	.globl _abs
                             24 	.globl _mydrawStringM1
                             25 	.globl _sprintf
                             26 	.globl _cpct_etm_setTileset2x4
                             27 	.globl _cpct_etm_drawTileBox2x4
                             28 	.globl _cpct_getRandom_mxor_u8
                             29 	.globl _cpct_setCRTCReg
                             30 	.globl _cpct_getScreenPtr
                             31 	.globl _cpct_setDrawCharM1
                             32 	.globl _cpct_drawSpriteMasked
                             33 	.globl _cpct_drawSprite
                             34 	.globl _cpct_drawSolidBox
                             35 	.globl _cpct_px2byteM1
                             36 	.globl _cpct_isAnyKeyPressed_f
                             37 	.globl _cpct_scanKeyboard_f
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DATA
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _INITIALIZED
                             49 ;--------------------------------------------------------
                             50 ; absolute external ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DABS (ABS)
                             53 ;--------------------------------------------------------
                             54 ; global & static initialisations
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _GSINIT
                             58 	.area _GSFINAL
                             59 	.area _GSINIT
                             60 ;--------------------------------------------------------
                             61 ; Home
                             62 ;--------------------------------------------------------
                             63 	.area _HOME
                             64 	.area _HOME
                             65 ;--------------------------------------------------------
                             66 ; code
                             67 ;--------------------------------------------------------
                             68 	.area _CODE
                             69 ;src/funciones.c:40: u8 abs (i8 valor){
                             70 ;	---------------------------------
                             71 ; Function abs
                             72 ; ---------------------------------
   0000                      73 _abs::
                             74 ;src/funciones.c:41: return (valor > 0 ? valor : -valor);
   0000 AF            [ 4]   75 	xor	a, a
   0001 FD 21 02 00   [14]   76 	ld	iy, #2
   0005 FD 39         [15]   77 	add	iy, sp
   0007 FD 96 00      [19]   78 	sub	a, 0 (iy)
   000A E2r0Fr00      [10]   79 	jp	PO, 00109$
   000D EE 80         [ 7]   80 	xor	a, #0x80
   000F                      81 00109$:
   000F F2r1Cr00      [10]   82 	jp	P, 00103$
   0012 FD 21 02 00   [14]   83 	ld	iy, #2
   0016 FD 39         [15]   84 	add	iy, sp
   0018 FD 6E 00      [19]   85 	ld	l, 0 (iy)
   001B C9            [10]   86 	ret
   001C                      87 00103$:
   001C AF            [ 4]   88 	xor	a, a
   001D FD 21 02 00   [14]   89 	ld	iy, #2
   0021 FD 39         [15]   90 	add	iy, sp
   0023 FD 96 00      [19]   91 	sub	a, 0 (iy)
   0026 6F            [ 4]   92 	ld	l, a
   0027 C9            [10]   93 	ret
                             94 ;src/funciones.c:44: void pausa(u16 ciclos) {
                             95 ;	---------------------------------
                             96 ; Function pausa
                             97 ; ---------------------------------
   0028                      98 _pausa::
                             99 ;src/funciones.c:47: for (i = 0; i < ciclos; i++)
   0028 01 00 00      [10]  100 	ld	bc, #0x0000
   002B                     101 00103$:
   002B 21 02 00      [10]  102 	ld	hl, #2
   002E 39            [11]  103 	add	hl, sp
   002F 79            [ 4]  104 	ld	a, c
   0030 96            [ 7]  105 	sub	a, (hl)
   0031 78            [ 4]  106 	ld	a, b
   0032 23            [ 6]  107 	inc	hl
   0033 9E            [ 7]  108 	sbc	a, (hl)
   0034 D0            [11]  109 	ret	NC
   0035 03            [ 6]  110 	inc	bc
   0036 18 F3         [12]  111 	jr	00103$
                            112 ;src/funciones.c:51: void efecto_pliegue(u8 modo) {
                            113 ;	---------------------------------
                            114 ; Function efecto_pliegue
                            115 ; ---------------------------------
   0038                     116 _efecto_pliegue::
                            117 ;src/funciones.c:54: i = 200;
   0038 06 C8         [ 7]  118 	ld	b, #0xc8
                            119 ;src/funciones.c:55: if (modo)
   003A 21 02 00      [10]  120 	ld	hl, #2+0
   003D 39            [11]  121 	add	hl, sp
   003E 7E            [ 7]  122 	ld	a, (hl)
   003F B7            [ 4]  123 	or	a, a
   0040 28 02         [12]  124 	jr	Z,00108$
                            125 ;src/funciones.c:56: i = 1;
   0042 06 01         [ 7]  126 	ld	b, #0x01
                            127 ;src/funciones.c:58: do {
   0044                     128 00108$:
                            129 ;src/funciones.c:59: cpct_setCRTCReg (1, i/5);   //Cambiar nº columnas por pantalla (1-40)
   0044 C5            [11]  130 	push	bc
   0045 3E 05         [ 7]  131 	ld	a, #0x05
   0047 F5            [11]  132 	push	af
   0048 33            [ 6]  133 	inc	sp
   0049 C5            [11]  134 	push	bc
   004A 33            [ 6]  135 	inc	sp
   004B CDr00r00      [17]  136 	call	__divuchar
   004E F1            [10]  137 	pop	af
   004F 55            [ 4]  138 	ld	d, l
   0050 1E 01         [ 7]  139 	ld	e, #0x01
   0052 D5            [11]  140 	push	de
   0053 CDr00r00      [17]  141 	call	_cpct_setCRTCReg
   0056 C1            [10]  142 	pop	bc
                            143 ;src/funciones.c:60: cpct_setCRTCReg (6, i/8);   //Cambiar nº de filas por pantallas (1-25)
   0057 50            [ 4]  144 	ld	d, b
   0058 CB 3A         [ 8]  145 	srl	d
   005A CB 3A         [ 8]  146 	srl	d
   005C CB 3A         [ 8]  147 	srl	d
   005E C5            [11]  148 	push	bc
   005F 1E 06         [ 7]  149 	ld	e, #0x06
   0061 D5            [11]  150 	push	de
   0062 CDr00r00      [17]  151 	call	_cpct_setCRTCReg
   0065 C1            [10]  152 	pop	bc
                            153 ;src/funciones.c:62: for (j = 0; j < 255; j++)
   0066 0E FF         [ 7]  154 	ld	c, #0xff
   0068                     155 00113$:
   0068 59            [ 4]  156 	ld	e, c
   0069 1D            [ 4]  157 	dec	e
   006A 7B            [ 4]  158 	ld	a,e
   006B 4F            [ 4]  159 	ld	c,a
   006C B7            [ 4]  160 	or	a, a
   006D 20 F9         [12]  161 	jr	NZ,00113$
                            162 ;src/funciones.c:65: if (modo) {
   006F 21 02 00      [10]  163 	ld	hl, #2+0
   0072 39            [11]  164 	add	hl, sp
   0073 7E            [ 7]  165 	ld	a, (hl)
   0074 B7            [ 4]  166 	or	a, a
   0075 28 03         [12]  167 	jr	Z,00105$
                            168 ;src/funciones.c:66: i++;
   0077 04            [ 4]  169 	inc	b
   0078 18 01         [12]  170 	jr	00109$
   007A                     171 00105$:
                            172 ;src/funciones.c:68: i--; 
   007A 05            [ 4]  173 	dec	b
   007B                     174 00109$:
                            175 ;src/funciones.c:70: } while (i > 0 && i <= 200);
   007B 78            [ 4]  176 	ld	a, b
   007C B7            [ 4]  177 	or	a, a
   007D C8            [11]  178 	ret	Z
   007E 3E C8         [ 7]  179 	ld	a, #0xc8
   0080 90            [ 4]  180 	sub	a, b
   0081 30 C1         [12]  181 	jr	NC,00108$
   0083 C9            [10]  182 	ret
                            183 ;src/funciones.c:74: void pausaTecladoLibre(){
                            184 ;	---------------------------------
                            185 ; Function pausaTecladoLibre
                            186 ; ---------------------------------
   0084                     187 _pausaTecladoLibre::
                            188 ;src/funciones.c:75: while (cpct_isAnyKeyPressed_f ()) { //Asegurarnos que se ha dejado de pulsar la tecla anterior 
   0084                     189 00101$:
   0084 CDr00r00      [17]  190 	call	_cpct_isAnyKeyPressed_f
   0087 7D            [ 4]  191 	ld	a, l
   0088 B7            [ 4]  192 	or	a, a
   0089 C8            [11]  193 	ret	Z
                            194 ;src/funciones.c:76: cpct_scanKeyboard_f();
   008A CDr00r00      [17]  195 	call	_cpct_scanKeyboard_f
   008D 18 F5         [12]  196 	jr	00101$
                            197 ;src/funciones.c:80: void dibujarMarcoExterior (){
                            198 ;	---------------------------------
                            199 ; Function dibujarMarcoExterior
                            200 ; ---------------------------------
   008F                     201 _dibujarMarcoExterior::
   008F DD E5         [15]  202 	push	ix
   0091 DD 21 00 00   [14]  203 	ld	ix,#0
   0095 DD 39         [15]  204 	add	ix,sp
   0097 F5            [11]  205 	push	af
                            206 ;src/funciones.c:85: tile = (u8*) &G_tile_cruzada[0];
   0098 01r00r00      [10]  207 	ld	bc, #_G_tile_cruzada+0
                            208 ;src/funciones.c:86: if ((nivel/10) == 1)
   009B C5            [11]  209 	push	bc
   009C 3E 0A         [ 7]  210 	ld	a, #0x0a
   009E F5            [11]  211 	push	af
   009F 33            [ 6]  212 	inc	sp
   00A0 3Ar00r00      [13]  213 	ld	a, (_nivel)
   00A3 F5            [11]  214 	push	af
   00A4 33            [ 6]  215 	inc	sp
   00A5 CDr00r00      [17]  216 	call	__divuchar
   00A8 F1            [10]  217 	pop	af
   00A9 C1            [10]  218 	pop	bc
   00AA 7D            [ 4]  219 	ld	a, l
   00AB 3D            [ 4]  220 	dec	a
   00AC 20 03         [12]  221 	jr	NZ,00102$
                            222 ;src/funciones.c:87: tile = (u8*) &G_tile_caverna[0];
   00AE 01r00r00      [10]  223 	ld	bc, #_G_tile_caverna+0
   00B1                     224 00102$:
                            225 ;src/funciones.c:88: if ((nivel/10) == 2)
   00B1 7D            [ 4]  226 	ld	a, l
   00B2 D6 02         [ 7]  227 	sub	a, #0x02
   00B4 20 03         [12]  228 	jr	NZ,00115$
                            229 ;src/funciones.c:89: tile = (u8*) &G_tile_castillo[0];
   00B6 01r00r00      [10]  230 	ld	bc, #_G_tile_castillo
                            231 ;src/funciones.c:93: for (i=0; i < 80; i += 4) {
   00B9                     232 00115$:
   00B9 16 00         [ 7]  233 	ld	d, #0x00
   00BB                     234 00107$:
                            235 ;src/funciones.c:94: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, i,   0), 4, 16);
   00BB C5            [11]  236 	push	bc
   00BC D5            [11]  237 	push	de
   00BD AF            [ 4]  238 	xor	a, a
   00BE F5            [11]  239 	push	af
   00BF 33            [ 6]  240 	inc	sp
   00C0 D5            [11]  241 	push	de
   00C1 33            [ 6]  242 	inc	sp
   00C2 21 00 C0      [10]  243 	ld	hl, #0xc000
   00C5 E5            [11]  244 	push	hl
   00C6 CDr00r00      [17]  245 	call	_cpct_getScreenPtr
   00C9 D1            [10]  246 	pop	de
   00CA C1            [10]  247 	pop	bc
   00CB E5            [11]  248 	push	hl
   00CC FD E1         [14]  249 	pop	iy
   00CE 33            [ 6]  250 	inc	sp
   00CF 33            [ 6]  251 	inc	sp
   00D0 C5            [11]  252 	push	bc
   00D1 C5            [11]  253 	push	bc
   00D2 D5            [11]  254 	push	de
   00D3 21 04 10      [10]  255 	ld	hl, #0x1004
   00D6 E5            [11]  256 	push	hl
   00D7 FD E5         [15]  257 	push	iy
   00D9 DD 6E FE      [19]  258 	ld	l,-2 (ix)
   00DC DD 66 FF      [19]  259 	ld	h,-1 (ix)
   00DF E5            [11]  260 	push	hl
   00E0 CDr00r00      [17]  261 	call	_cpct_drawSprite
   00E3 D1            [10]  262 	pop	de
   00E4 D5            [11]  263 	push	de
   00E5 3E B0         [ 7]  264 	ld	a, #0xb0
   00E7 F5            [11]  265 	push	af
   00E8 33            [ 6]  266 	inc	sp
   00E9 D5            [11]  267 	push	de
   00EA 33            [ 6]  268 	inc	sp
   00EB 21 00 C0      [10]  269 	ld	hl, #0xc000
   00EE E5            [11]  270 	push	hl
   00EF CDr00r00      [17]  271 	call	_cpct_getScreenPtr
   00F2 D1            [10]  272 	pop	de
   00F3 C1            [10]  273 	pop	bc
   00F4 E5            [11]  274 	push	hl
   00F5 FD E1         [14]  275 	pop	iy
   00F7 C5            [11]  276 	push	bc
   00F8 D5            [11]  277 	push	de
   00F9 21 04 10      [10]  278 	ld	hl, #0x1004
   00FC E5            [11]  279 	push	hl
   00FD FD E5         [15]  280 	push	iy
   00FF DD 6E FE      [19]  281 	ld	l,-2 (ix)
   0102 DD 66 FF      [19]  282 	ld	h,-1 (ix)
   0105 E5            [11]  283 	push	hl
   0106 CDr00r00      [17]  284 	call	_cpct_drawSprite
   0109 D1            [10]  285 	pop	de
   010A C1            [10]  286 	pop	bc
                            287 ;src/funciones.c:93: for (i=0; i < 80; i += 4) {
   010B 14            [ 4]  288 	inc	d
   010C 14            [ 4]  289 	inc	d
   010D 14            [ 4]  290 	inc	d
   010E 14            [ 4]  291 	inc	d
   010F 7A            [ 4]  292 	ld	a, d
   0110 D6 50         [ 7]  293 	sub	a, #0x50
   0112 38 A7         [12]  294 	jr	C,00107$
                            295 ;src/funciones.c:98: for (i=16; i < 176; i += 16 ){
   0114 06 10         [ 7]  296 	ld	b, #0x10
   0116                     297 00109$:
                            298 ;src/funciones.c:99: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, 0, i), 4, 16);
   0116 C5            [11]  299 	push	bc
   0117 C5            [11]  300 	push	bc
   0118 33            [ 6]  301 	inc	sp
   0119 AF            [ 4]  302 	xor	a, a
   011A F5            [11]  303 	push	af
   011B 33            [ 6]  304 	inc	sp
   011C 21 00 C0      [10]  305 	ld	hl, #0xc000
   011F E5            [11]  306 	push	hl
   0120 CDr00r00      [17]  307 	call	_cpct_getScreenPtr
   0123 11 04 10      [10]  308 	ld	de, #0x1004
   0126 D5            [11]  309 	push	de
   0127 E5            [11]  310 	push	hl
   0128 DD 6E FE      [19]  311 	ld	l,-2 (ix)
   012B DD 66 FF      [19]  312 	ld	h,-1 (ix)
   012E E5            [11]  313 	push	hl
   012F CDr00r00      [17]  314 	call	_cpct_drawSprite
   0132 C1            [10]  315 	pop	bc
                            316 ;src/funciones.c:100: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START,76, i), 4, 16);  
   0133 C5            [11]  317 	push	bc
   0134 C5            [11]  318 	push	bc
   0135 33            [ 6]  319 	inc	sp
   0136 3E 4C         [ 7]  320 	ld	a, #0x4c
   0138 F5            [11]  321 	push	af
   0139 33            [ 6]  322 	inc	sp
   013A 21 00 C0      [10]  323 	ld	hl, #0xc000
   013D E5            [11]  324 	push	hl
   013E CDr00r00      [17]  325 	call	_cpct_getScreenPtr
   0141 11 04 10      [10]  326 	ld	de, #0x1004
   0144 D5            [11]  327 	push	de
   0145 E5            [11]  328 	push	hl
   0146 DD 6E FE      [19]  329 	ld	l,-2 (ix)
   0149 DD 66 FF      [19]  330 	ld	h,-1 (ix)
   014C E5            [11]  331 	push	hl
   014D CDr00r00      [17]  332 	call	_cpct_drawSprite
   0150 C1            [10]  333 	pop	bc
                            334 ;src/funciones.c:98: for (i=16; i < 176; i += 16 ){
   0151 78            [ 4]  335 	ld	a, b
   0152 C6 10         [ 7]  336 	add	a, #0x10
   0154 47            [ 4]  337 	ld	b,a
   0155 D6 B0         [ 7]  338 	sub	a, #0xb0
   0157 38 BD         [12]  339 	jr	C,00109$
   0159 DD F9         [10]  340 	ld	sp, ix
   015B DD E1         [14]  341 	pop	ix
   015D C9            [10]  342 	ret
                            343 ;src/funciones.c:105: void dibujarMarcoInterior (){
                            344 ;	---------------------------------
                            345 ; Function dibujarMarcoInterior
                            346 ; ---------------------------------
   015E                     347 _dibujarMarcoInterior::
   015E DD E5         [15]  348 	push	ix
   0160 DD 21 00 00   [14]  349 	ld	ix,#0
   0164 DD 39         [15]  350 	add	ix,sp
   0166 F5            [11]  351 	push	af
                            352 ;src/funciones.c:110: tile = (u8*) &G_tile_cruzada[0];
   0167 01r00r00      [10]  353 	ld	bc, #_G_tile_cruzada
                            354 ;src/funciones.c:111: if ((nivel/10) == 1)
   016A C5            [11]  355 	push	bc
   016B 3E 0A         [ 7]  356 	ld	a, #0x0a
   016D F5            [11]  357 	push	af
   016E 33            [ 6]  358 	inc	sp
   016F 3Ar00r00      [13]  359 	ld	a, (_nivel)
   0172 F5            [11]  360 	push	af
   0173 33            [ 6]  361 	inc	sp
   0174 CDr00r00      [17]  362 	call	__divuchar
   0177 F1            [10]  363 	pop	af
   0178 C1            [10]  364 	pop	bc
   0179 2D            [ 4]  365 	dec	l
   017A 20 03         [12]  366 	jr	NZ,00112$
                            367 ;src/funciones.c:112: tile = (u8*) &G_tile_cruzada[0];
   017C 01r00r00      [10]  368 	ld	bc, #_G_tile_cruzada
                            369 ;src/funciones.c:116: for (i=0; i < 80; i += 4) {
   017F                     370 00112$:
   017F 1E 00         [ 7]  371 	ld	e, #0x00
   0181                     372 00105$:
                            373 ;src/funciones.c:117: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, i,  48), 4, 16);
   0181 C5            [11]  374 	push	bc
   0182 D5            [11]  375 	push	de
   0183 16 30         [ 7]  376 	ld	d,#0x30
   0185 D5            [11]  377 	push	de
   0186 21 00 C0      [10]  378 	ld	hl, #0xc000
   0189 E5            [11]  379 	push	hl
   018A CDr00r00      [17]  380 	call	_cpct_getScreenPtr
   018D D1            [10]  381 	pop	de
   018E C1            [10]  382 	pop	bc
   018F E5            [11]  383 	push	hl
   0190 FD E1         [14]  384 	pop	iy
   0192 33            [ 6]  385 	inc	sp
   0193 33            [ 6]  386 	inc	sp
   0194 C5            [11]  387 	push	bc
   0195 C5            [11]  388 	push	bc
   0196 D5            [11]  389 	push	de
   0197 21 04 10      [10]  390 	ld	hl, #0x1004
   019A E5            [11]  391 	push	hl
   019B FD E5         [15]  392 	push	iy
   019D DD 6E FE      [19]  393 	ld	l,-2 (ix)
   01A0 DD 66 FF      [19]  394 	ld	h,-1 (ix)
   01A3 E5            [11]  395 	push	hl
   01A4 CDr00r00      [17]  396 	call	_cpct_drawSprite
   01A7 D1            [10]  397 	pop	de
   01A8 C1            [10]  398 	pop	bc
                            399 ;src/funciones.c:116: for (i=0; i < 80; i += 4) {
   01A9 1C            [ 4]  400 	inc	e
   01AA 1C            [ 4]  401 	inc	e
   01AB 1C            [ 4]  402 	inc	e
   01AC 1C            [ 4]  403 	inc	e
   01AD 7B            [ 4]  404 	ld	a, e
   01AE D6 50         [ 7]  405 	sub	a, #0x50
   01B0 38 CF         [12]  406 	jr	C,00105$
                            407 ;src/funciones.c:120: for (i=64; i < 176; i += 16 ){
   01B2 06 40         [ 7]  408 	ld	b, #0x40
   01B4                     409 00107$:
                            410 ;src/funciones.c:121: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START,40, i), 4, 16);
   01B4 C5            [11]  411 	push	bc
   01B5 C5            [11]  412 	push	bc
   01B6 33            [ 6]  413 	inc	sp
   01B7 3E 28         [ 7]  414 	ld	a, #0x28
   01B9 F5            [11]  415 	push	af
   01BA 33            [ 6]  416 	inc	sp
   01BB 21 00 C0      [10]  417 	ld	hl, #0xc000
   01BE E5            [11]  418 	push	hl
   01BF CDr00r00      [17]  419 	call	_cpct_getScreenPtr
   01C2 11 04 10      [10]  420 	ld	de, #0x1004
   01C5 D5            [11]  421 	push	de
   01C6 E5            [11]  422 	push	hl
   01C7 DD 6E FE      [19]  423 	ld	l,-2 (ix)
   01CA DD 66 FF      [19]  424 	ld	h,-1 (ix)
   01CD E5            [11]  425 	push	hl
   01CE CDr00r00      [17]  426 	call	_cpct_drawSprite
   01D1 C1            [10]  427 	pop	bc
                            428 ;src/funciones.c:120: for (i=64; i < 176; i += 16 ){
   01D2 78            [ 4]  429 	ld	a, b
   01D3 C6 10         [ 7]  430 	add	a, #0x10
   01D5 47            [ 4]  431 	ld	b,a
   01D6 D6 B0         [ 7]  432 	sub	a, #0xb0
   01D8 38 DA         [12]  433 	jr	C,00107$
                            434 ;src/funciones.c:125: cpct_drawSolidBox (cpctm_screenPtr (CPCT_VMEM_START, 43, 56), cpct_px2byteM1 (0, 0, 0, 0), 34, 128); //borrar pantalla
   01DA 21 00 00      [10]  435 	ld	hl, #0x0000
   01DD E5            [11]  436 	push	hl
   01DE 2E 00         [ 7]  437 	ld	l, #0x00
   01E0 E5            [11]  438 	push	hl
   01E1 CDr00r00      [17]  439 	call	_cpct_px2byteM1
   01E4 F1            [10]  440 	pop	af
   01E5 F1            [10]  441 	pop	af
   01E6 45            [ 4]  442 	ld	b, l
   01E7 21 22 80      [10]  443 	ld	hl, #0x8022
   01EA E5            [11]  444 	push	hl
   01EB C5            [11]  445 	push	bc
   01EC 33            [ 6]  446 	inc	sp
   01ED 21 5B C2      [10]  447 	ld	hl, #0xc25b
   01F0 E5            [11]  448 	push	hl
   01F1 CDr00r00      [17]  449 	call	_cpct_drawSolidBox
   01F4 DD F9         [10]  450 	ld	sp, ix
   01F6 DD E1         [14]  451 	pop	ix
   01F8 C9            [10]  452 	ret
                            453 ;src/funciones.c:128: void dibujarEscenario(){
                            454 ;	---------------------------------
                            455 ; Function dibujarEscenario
                            456 ; ---------------------------------
   01F9                     457 _dibujarEscenario::
                            458 ;src/funciones.c:131: cpct_etm_setTileset2x4(tileset1);
   01F9 21r00r00      [10]  459 	ld	hl, #_tileset1
   01FC CDr00r00      [17]  460 	call	_cpct_etm_setTileset2x4
                            461 ;src/funciones.c:132: if (nivel > 10)
   01FF 3E 0A         [ 7]  462 	ld	a, #0x0a
   0201 FD 21r00r00   [14]  463 	ld	iy, #_nivel
   0205 FD 96 00      [19]  464 	sub	a, 0 (iy)
   0208 30 06         [12]  465 	jr	NC,00102$
                            466 ;src/funciones.c:133: cpct_etm_setTileset2x4(tileset2);
   020A 21r00r00      [10]  467 	ld	hl, #_tileset2
   020D CDr00r00      [17]  468 	call	_cpct_etm_setTileset2x4
   0210                     469 00102$:
                            470 ;src/funciones.c:137: mapa = (u8*) (&g_mapa01[0] + ((nivel-1) * 504));
   0210 01r00r00      [10]  471 	ld	bc, #_g_mapa01+0
   0213 21r00r00      [10]  472 	ld	hl,#_nivel + 0
   0216 5E            [ 7]  473 	ld	e, (hl)
   0217 16 00         [ 7]  474 	ld	d, #0x00
   0219 1B            [ 6]  475 	dec	de
   021A 6B            [ 4]  476 	ld	l, e
   021B 62            [ 4]  477 	ld	h, d
   021C 29            [11]  478 	add	hl, hl
   021D 19            [11]  479 	add	hl, de
   021E 29            [11]  480 	add	hl, hl
   021F 19            [11]  481 	add	hl, de
   0220 29            [11]  482 	add	hl, hl
   0221 19            [11]  483 	add	hl, de
   0222 29            [11]  484 	add	hl, hl
   0223 19            [11]  485 	add	hl, de
   0224 29            [11]  486 	add	hl, hl
   0225 19            [11]  487 	add	hl, de
   0226 29            [11]  488 	add	hl, hl
   0227 29            [11]  489 	add	hl, hl
   0228 29            [11]  490 	add	hl, hl
   0229 09            [11]  491 	add	hl, bc
                            492 ;src/funciones.c:139: cpct_etm_drawTilemap2x4 ( g_mapa01_W, g_mapa01_H , INICIO_AREA_JUEGO, mapa);
   022A E5            [11]  493 	push	hl
   022B 21 84 C2      [10]  494 	ld	hl, #0xc284
   022E E5            [11]  495 	push	hl
   022F 21 1C 12      [10]  496 	ld	hl, #0x121c
   0232 E5            [11]  497 	push	hl
   0233 2E 00         [ 7]  498 	ld	l, #0x00
   0235 E5            [11]  499 	push	hl
   0236 AF            [ 4]  500 	xor	a, a
   0237 F5            [11]  501 	push	af
   0238 33            [ 6]  502 	inc	sp
   0239 CDr00r00      [17]  503 	call	_cpct_etm_drawTileBox2x4
   023C C9            [10]  504 	ret
                            505 ;src/funciones.c:143: void printStats(TStats *a) {
                            506 ;	---------------------------------
                            507 ; Function printStats
                            508 ; ---------------------------------
   023D                     509 _printStats::
   023D DD E5         [15]  510 	push	ix
   023F DD 21 00 00   [14]  511 	ld	ix,#0
   0243 DD 39         [15]  512 	add	ix,sp
   0245 21 D6 FF      [10]  513 	ld	hl, #-42
   0248 39            [11]  514 	add	hl, sp
   0249 F9            [ 6]  515 	ld	sp, hl
                            516 ;src/funciones.c:146: cpct_setDrawCharM1(2, 0);
   024A 21 02 00      [10]  517 	ld	hl, #0x0002
   024D E5            [11]  518 	push	hl
   024E CDr00r00      [17]  519 	call	_cpct_setDrawCharM1
                            520 ;src/funciones.c:147: sprintf(temp, "                                    ");
   0251 11rDDr02      [10]  521 	ld	de, #___str_0+0
   0254 21 00 00      [10]  522 	ld	hl, #0x0000
   0257 39            [11]  523 	add	hl, sp
   0258 DD 75 FE      [19]  524 	ld	-2 (ix), l
   025B DD 74 FF      [19]  525 	ld	-1 (ix), h
   025E D5            [11]  526 	push	de
   025F E5            [11]  527 	push	hl
   0260 CDr00r00      [17]  528 	call	_sprintf
   0263 F1            [10]  529 	pop	af
   0264 F1            [10]  530 	pop	af
                            531 ;src/funciones.c:148: if (a->energy)
   0265 DD 4E 04      [19]  532 	ld	c,4 (ix)
   0268 DD 46 05      [19]  533 	ld	b,5 (ix)
   026B C5            [11]  534 	push	bc
   026C FD E1         [14]  535 	pop	iy
   026E FD 5E 0A      [19]  536 	ld	e, 10 (iy)
   0271 7B            [ 4]  537 	ld	a, e
   0272 B7            [ 4]  538 	or	a, a
   0273 28 45         [12]  539 	jr	Z,00102$
                            540 ;src/funciones.c:149: sprintf(temp, "%-9s=> HP:%02d. ATT: %02d. DEF: %02d",a->name, a->energy,a->attack,a->defense);
   0275 C5            [11]  541 	push	bc
   0276 FD E1         [14]  542 	pop	iy
   0278 FD 6E 0E      [19]  543 	ld	l, 14 (iy)
   027B DD 75 FC      [19]  544 	ld	-4 (ix), l
   027E DD 36 FD 00   [19]  545 	ld	-3 (ix), #0x00
   0282 C5            [11]  546 	push	bc
   0283 FD E1         [14]  547 	pop	iy
   0285 FD 6E 0C      [19]  548 	ld	l, 12 (iy)
   0288 DD 75 FA      [19]  549 	ld	-6 (ix), l
   028B DD 36 FB 00   [19]  550 	ld	-5 (ix), #0x00
   028F 16 00         [ 7]  551 	ld	d, #0x00
   0291 DD 6E FE      [19]  552 	ld	l,-2 (ix)
   0294 DD 66 FF      [19]  553 	ld	h,-1 (ix)
   0297 E5            [11]  554 	push	hl
   0298 FD E1         [14]  555 	pop	iy
   029A C5            [11]  556 	push	bc
   029B DD 6E FC      [19]  557 	ld	l,-4 (ix)
   029E DD 66 FD      [19]  558 	ld	h,-3 (ix)
   02A1 E5            [11]  559 	push	hl
   02A2 DD 6E FA      [19]  560 	ld	l,-6 (ix)
   02A5 DD 66 FB      [19]  561 	ld	h,-5 (ix)
   02A8 E5            [11]  562 	push	hl
   02A9 D5            [11]  563 	push	de
   02AA C5            [11]  564 	push	bc
   02AB 21r02r03      [10]  565 	ld	hl, #___str_1
   02AE E5            [11]  566 	push	hl
   02AF FD E5         [15]  567 	push	iy
   02B1 CDr00r00      [17]  568 	call	_sprintf
   02B4 21 0C 00      [10]  569 	ld	hl, #12
   02B7 39            [11]  570 	add	hl, sp
   02B8 F9            [ 6]  571 	ld	sp, hl
   02B9 C1            [10]  572 	pop	bc
   02BA                     573 00102$:
                            574 ;src/funciones.c:151: mydrawStringM1(temp, cpct_getScreenPtr(CPCT_VMEM_START, 4, a->pos_y));
   02BA C5            [11]  575 	push	bc
   02BB FD E1         [14]  576 	pop	iy
   02BD FD 46 11      [19]  577 	ld	b, 17 (iy)
   02C0 C5            [11]  578 	push	bc
   02C1 33            [ 6]  579 	inc	sp
   02C2 3E 04         [ 7]  580 	ld	a, #0x04
   02C4 F5            [11]  581 	push	af
   02C5 33            [ 6]  582 	inc	sp
   02C6 21 00 C0      [10]  583 	ld	hl, #0xc000
   02C9 E5            [11]  584 	push	hl
   02CA CDr00r00      [17]  585 	call	_cpct_getScreenPtr
   02CD DD 4E FE      [19]  586 	ld	c,-2 (ix)
   02D0 DD 46 FF      [19]  587 	ld	b,-1 (ix)
   02D3 E5            [11]  588 	push	hl
   02D4 C5            [11]  589 	push	bc
   02D5 CDr00r00      [17]  590 	call	_mydrawStringM1
   02D8 DD F9         [10]  591 	ld	sp, ix
   02DA DD E1         [14]  592 	pop	ix
   02DC C9            [10]  593 	ret
   02DD                     594 ___str_0:
   02DD 20 20 20 20 20 20   595 	.ascii "                                    "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
   0301 00                  596 	.db 0x00
   0302                     597 ___str_1:
   0302 25 2D 39 73 3D 3E   598 	.ascii "%-9s=> HP:%02d. ATT: %02d. DEF: %02d"
        20 48 50 3A 25 30
        32 64 2E 20 41 54
        54 3A 20 25 30 32
        64 2E 20 44 45 46
        3A 20 25 30 32 64
   0326 00                  599 	.db 0x00
                            600 ;src/funciones.c:154: void printLevel() {
                            601 ;	---------------------------------
                            602 ; Function printLevel
                            603 ; ---------------------------------
   0327                     604 _printLevel::
   0327 DD E5         [15]  605 	push	ix
   0329 DD 21 00 00   [14]  606 	ld	ix,#0
   032D DD 39         [15]  607 	add	ix,sp
   032F 21 D8 FF      [10]  608 	ld	hl, #-40
   0332 39            [11]  609 	add	hl, sp
   0333 F9            [ 6]  610 	ld	sp, hl
                            611 ;src/funciones.c:157: sprintf(temp, "LEVEL: %02d",nivel);
   0334 21r00r00      [10]  612 	ld	hl,#_nivel + 0
   0337 5E            [ 7]  613 	ld	e, (hl)
   0338 16 00         [ 7]  614 	ld	d, #0x00
   033A 21 00 00      [10]  615 	ld	hl, #0x0000
   033D 39            [11]  616 	add	hl, sp
   033E 4D            [ 4]  617 	ld	c, l
   033F 44            [ 4]  618 	ld	b, h
   0340 E5            [11]  619 	push	hl
   0341 D5            [11]  620 	push	de
   0342 11r64r03      [10]  621 	ld	de, #___str_2
   0345 D5            [11]  622 	push	de
   0346 C5            [11]  623 	push	bc
   0347 CDr00r00      [17]  624 	call	_sprintf
   034A 21 06 00      [10]  625 	ld	hl, #6
   034D 39            [11]  626 	add	hl, sp
   034E F9            [ 6]  627 	ld	sp, hl
   034F 01 02 00      [10]  628 	ld	bc, #0x0002
   0352 C5            [11]  629 	push	bc
   0353 CDr00r00      [17]  630 	call	_cpct_setDrawCharM1
   0356 E1            [10]  631 	pop	hl
                            632 ;src/funciones.c:159: mydrawStringM1(temp, cpctm_screenPtr(CPCT_VMEM_START, 4, 16));
   0357 01 A4 C0      [10]  633 	ld	bc, #0xc0a4
   035A C5            [11]  634 	push	bc
   035B E5            [11]  635 	push	hl
   035C CDr00r00      [17]  636 	call	_mydrawStringM1
   035F DD F9         [10]  637 	ld	sp, ix
   0361 DD E1         [14]  638 	pop	ix
   0363 C9            [10]  639 	ret
   0364                     640 ___str_2:
   0364 4C 45 56 45 4C 3A   641 	.ascii "LEVEL: %02d"
        20 25 30 32 64
   036F 00                  642 	.db 0x00
                            643 ;src/funciones.c:162: void printConsole  (void* string, u8 pen, u8 bground) {
                            644 ;	---------------------------------
                            645 ; Function printConsole
                            646 ; ---------------------------------
   0370                     647 _printConsole::
                            648 ;src/funciones.c:163: if (cursorConsola > 175){
   0370 3E AF         [ 7]  649 	ld	a, #0xaf
   0372 FD 21r00r00   [14]  650 	ld	iy, #_cursorConsola
   0376 FD 96 00      [19]  651 	sub	a, 0 (iy)
   0379 30 27         [12]  652 	jr	NC,00102$
                            653 ;src/funciones.c:165: pausa(SEGUNDO);
   037B 21 00 80      [10]  654 	ld	hl, #0x8000
   037E E5            [11]  655 	push	hl
   037F CDr28r00      [17]  656 	call	_pausa
   0382 F1            [10]  657 	pop	af
                            658 ;src/funciones.c:166: cpct_drawSolidBox (cpctm_screenPtr (CPCT_VMEM_START, 43, 56), cpct_px2byteM1 (0, 0, 0, 0), 34, 128); //borrar pantalla
   0383 21 00 00      [10]  659 	ld	hl, #0x0000
   0386 E5            [11]  660 	push	hl
   0387 2E 00         [ 7]  661 	ld	l, #0x00
   0389 E5            [11]  662 	push	hl
   038A CDr00r00      [17]  663 	call	_cpct_px2byteM1
   038D F1            [10]  664 	pop	af
   038E F1            [10]  665 	pop	af
   038F 45            [ 4]  666 	ld	b, l
   0390 21 22 80      [10]  667 	ld	hl, #0x8022
   0393 E5            [11]  668 	push	hl
   0394 C5            [11]  669 	push	bc
   0395 33            [ 6]  670 	inc	sp
   0396 21 5B C2      [10]  671 	ld	hl, #0xc25b
   0399 E5            [11]  672 	push	hl
   039A CDr00r00      [17]  673 	call	_cpct_drawSolidBox
                            674 ;src/funciones.c:167: cursorConsola = 64;
   039D 21r00r00      [10]  675 	ld	hl,#_cursorConsola + 0
   03A0 36 40         [10]  676 	ld	(hl), #0x40
   03A2                     677 00102$:
                            678 ;src/funciones.c:170: cpct_setDrawCharM1(pen, bground);
   03A2 21 05 00      [10]  679 	ld	hl, #5+0
   03A5 39            [11]  680 	add	hl, sp
   03A6 7E            [ 7]  681 	ld	a, (hl)
   03A7 F5            [11]  682 	push	af
   03A8 33            [ 6]  683 	inc	sp
   03A9 21 05 00      [10]  684 	ld	hl, #5+0
   03AC 39            [11]  685 	add	hl, sp
   03AD 7E            [ 7]  686 	ld	a, (hl)
   03AE F5            [11]  687 	push	af
   03AF 33            [ 6]  688 	inc	sp
   03B0 CDr00r00      [17]  689 	call	_cpct_setDrawCharM1
                            690 ;src/funciones.c:171: mydrawStringM1(string, cpct_getScreenPtr(CPCT_VMEM_START, 44, cursorConsola));
   03B3 3Ar00r00      [13]  691 	ld	a, (_cursorConsola)
   03B6 57            [ 4]  692 	ld	d,a
   03B7 1E 2C         [ 7]  693 	ld	e,#0x2c
   03B9 D5            [11]  694 	push	de
   03BA 21 00 C0      [10]  695 	ld	hl, #0xc000
   03BD E5            [11]  696 	push	hl
   03BE CDr00r00      [17]  697 	call	_cpct_getScreenPtr
   03C1 E5            [11]  698 	push	hl
   03C2 21 04 00      [10]  699 	ld	hl, #4
   03C5 39            [11]  700 	add	hl, sp
   03C6 4E            [ 7]  701 	ld	c, (hl)
   03C7 23            [ 6]  702 	inc	hl
   03C8 46            [ 7]  703 	ld	b, (hl)
   03C9 C5            [11]  704 	push	bc
   03CA CDr00r00      [17]  705 	call	_mydrawStringM1
                            706 ;src/funciones.c:172: cursorConsola +=8;
   03CD 21r00r00      [10]  707 	ld	hl, #_cursorConsola
   03D0 7E            [ 7]  708 	ld	a, (hl)
   03D1 C6 08         [ 7]  709 	add	a, #0x08
   03D3 77            [ 7]  710 	ld	(hl), a
   03D4 C9            [10]  711 	ret
                            712 ;src/funciones.c:175: void atacar(TStats *a, TStats *b) {
                            713 ;	---------------------------------
                            714 ; Function atacar
                            715 ; ---------------------------------
   03D5                     716 _atacar::
   03D5 DD E5         [15]  717 	push	ix
   03D7 DD 21 00 00   [14]  718 	ld	ix,#0
   03DB DD 39         [15]  719 	add	ix,sp
   03DD 21 E6 FF      [10]  720 	ld	hl, #-26
   03E0 39            [11]  721 	add	hl, sp
   03E1 F9            [ 6]  722 	ld	sp, hl
                            723 ;src/funciones.c:179: pen = 0;
   03E2 DD 36 FB 00   [19]  724 	ld	-5 (ix), #0x00
                            725 ;src/funciones.c:180: bg = 2;
   03E6 DD 36 FA 02   [19]  726 	ld	-6 (ix), #0x02
                            727 ;src/funciones.c:181: if ((u16) a->sprite == (u16) G_mendo)  {
   03EA DD 4E 04      [19]  728 	ld	c,4 (ix)
   03ED DD 46 05      [19]  729 	ld	b,5 (ix)
   03F0 69            [ 4]  730 	ld	l, c
   03F1 60            [ 4]  731 	ld	h, b
   03F2 11 12 00      [10]  732 	ld	de, #0x0012
   03F5 19            [11]  733 	add	hl, de
   03F6 5E            [ 7]  734 	ld	e, (hl)
   03F7 23            [ 6]  735 	inc	hl
   03F8 56            [ 7]  736 	ld	d, (hl)
   03F9 DD 36 FEr00   [19]  737 	ld	-2 (ix), #<(_G_mendo)
   03FD DD 36 FFs00   [19]  738 	ld	-1 (ix), #>(_G_mendo)
   0401 7B            [ 4]  739 	ld	a, e
   0402 DD 96 FE      [19]  740 	sub	a, -2 (ix)
   0405 20 0E         [12]  741 	jr	NZ,00102$
   0407 7A            [ 4]  742 	ld	a, d
   0408 DD 96 FF      [19]  743 	sub	a, -1 (ix)
   040B 20 08         [12]  744 	jr	NZ,00102$
                            745 ;src/funciones.c:182: pen = 2;
   040D DD 36 FB 02   [19]  746 	ld	-5 (ix), #0x02
                            747 ;src/funciones.c:183: bg = 0;
   0411 DD 36 FA 00   [19]  748 	ld	-6 (ix), #0x00
   0415                     749 00102$:
                            750 ;src/funciones.c:187: ataque = a->attack + (2*(cpct_rand()%a->force)) - a->force;
   0415 C5            [11]  751 	push	bc
   0416 FD E1         [14]  752 	pop	iy
   0418 FD 7E 0C      [19]  753 	ld	a, 12 (iy)
   041B DD 77 FE      [19]  754 	ld	-2 (ix), a
   041E C5            [11]  755 	push	bc
   041F CDr00r00      [17]  756 	call	_cpct_getRandom_mxor_u8
   0422 5D            [ 4]  757 	ld	e, l
   0423 C1            [10]  758 	pop	bc
   0424 C5            [11]  759 	push	bc
   0425 FD E1         [14]  760 	pop	iy
   0427 FD 56 0D      [19]  761 	ld	d, 13 (iy)
   042A C5            [11]  762 	push	bc
   042B D5            [11]  763 	push	de
   042C D5            [11]  764 	push	de
   042D CDr00r00      [17]  765 	call	__moduchar
   0430 F1            [10]  766 	pop	af
   0431 D1            [10]  767 	pop	de
   0432 C1            [10]  768 	pop	bc
   0433 CB 25         [ 8]  769 	sla	l
   0435 DD 7E FE      [19]  770 	ld	a, -2 (ix)
   0438 85            [ 4]  771 	add	a, l
   0439 92            [ 4]  772 	sub	a, d
                            773 ;src/funciones.c:188: sprintf(temp, "%-9s ATT %02d",a->name, ataque);
   043A DD 77 FE      [19]  774 	ld	-2 (ix), a
   043D 5F            [ 4]  775 	ld	e, a
   043E 16 00         [ 7]  776 	ld	d, #0x00
   0440 21 00 00      [10]  777 	ld	hl, #0x0000
   0443 39            [11]  778 	add	hl, sp
   0444 DD 75 FC      [19]  779 	ld	-4 (ix), l
   0447 DD 74 FD      [19]  780 	ld	-3 (ix), h
   044A D5            [11]  781 	push	de
   044B C5            [11]  782 	push	bc
   044C 01rE3r04      [10]  783 	ld	bc, #___str_3
   044F C5            [11]  784 	push	bc
   0450 E5            [11]  785 	push	hl
   0451 CDr00r00      [17]  786 	call	_sprintf
   0454 21 08 00      [10]  787 	ld	hl, #8
   0457 39            [11]  788 	add	hl, sp
   0458 F9            [ 6]  789 	ld	sp, hl
                            790 ;src/funciones.c:189: printConsole(temp, pen, bg);
   0459 DD 4E FC      [19]  791 	ld	c,-4 (ix)
   045C DD 46 FD      [19]  792 	ld	b,-3 (ix)
   045F DD 66 FA      [19]  793 	ld	h, -6 (ix)
   0462 DD 6E FB      [19]  794 	ld	l, -5 (ix)
   0465 E5            [11]  795 	push	hl
   0466 C5            [11]  796 	push	bc
   0467 CDr70r03      [17]  797 	call	_printConsole
   046A F1            [10]  798 	pop	af
   046B F1            [10]  799 	pop	af
                            800 ;src/funciones.c:191: if (ataque < b->energy) {
   046C DD 4E 06      [19]  801 	ld	c,6 (ix)
   046F DD 46 07      [19]  802 	ld	b,7 (ix)
   0472 21 0A 00      [10]  803 	ld	hl, #0x000a
   0475 09            [11]  804 	add	hl, bc
   0476 5E            [ 7]  805 	ld	e, (hl)
   0477 DD 7E FE      [19]  806 	ld	a, -2 (ix)
   047A 93            [ 4]  807 	sub	a, e
   047B 30 1F         [12]  808 	jr	NC,00104$
                            809 ;src/funciones.c:192: b->energy = b->energy - ataque;
   047D 7B            [ 4]  810 	ld	a, e
   047E DD 96 FE      [19]  811 	sub	a, -2 (ix)
   0481 5F            [ 4]  812 	ld	e, a
   0482 73            [ 7]  813 	ld	(hl), e
                            814 ;src/funciones.c:193: sprintf(temp, "%-9s HP=>%02d",b->name, b->energy);
   0483 16 00         [ 7]  815 	ld	d, #0x00
   0485 DD 6E FC      [19]  816 	ld	l,-4 (ix)
   0488 DD 66 FD      [19]  817 	ld	h,-3 (ix)
   048B D5            [11]  818 	push	de
   048C C5            [11]  819 	push	bc
   048D 01rF1r04      [10]  820 	ld	bc, #___str_4
   0490 C5            [11]  821 	push	bc
   0491 E5            [11]  822 	push	hl
   0492 CDr00r00      [17]  823 	call	_sprintf
   0495 21 08 00      [10]  824 	ld	hl, #8
   0498 39            [11]  825 	add	hl, sp
   0499 F9            [ 6]  826 	ld	sp, hl
   049A 18 31         [12]  827 	jr	00105$
   049C                     828 00104$:
                            829 ;src/funciones.c:195: b->energy = 0;
   049C 36 00         [10]  830 	ld	(hl), #0x00
                            831 ;src/funciones.c:196: sprintf(temp, "%-9s DIED! ",b->name, b->energy);
   049E 5E            [ 7]  832 	ld	e, (hl)
   049F 16 00         [ 7]  833 	ld	d, #0x00
   04A1 DD 6E FC      [19]  834 	ld	l,-4 (ix)
   04A4 DD 66 FD      [19]  835 	ld	h,-3 (ix)
   04A7 D5            [11]  836 	push	de
   04A8 C5            [11]  837 	push	bc
   04A9 01rFFr04      [10]  838 	ld	bc, #___str_5
   04AC C5            [11]  839 	push	bc
   04AD E5            [11]  840 	push	hl
   04AE CDr00r00      [17]  841 	call	_sprintf
   04B1 21 08 00      [10]  842 	ld	hl, #8
   04B4 39            [11]  843 	add	hl, sp
   04B5 F9            [ 6]  844 	ld	sp, hl
                            845 ;src/funciones.c:197: printStats(b);
   04B6 DD 6E 06      [19]  846 	ld	l,6 (ix)
   04B9 DD 66 07      [19]  847 	ld	h,7 (ix)
   04BC E5            [11]  848 	push	hl
   04BD CDr3Dr02      [17]  849 	call	_printStats
   04C0 F1            [10]  850 	pop	af
                            851 ;src/funciones.c:199: ataque = pen;
   04C1 DD 4E FB      [19]  852 	ld	c, -5 (ix)
                            853 ;src/funciones.c:200: pen = bg;
   04C4 DD 7E FA      [19]  854 	ld	a, -6 (ix)
   04C7 DD 77 FB      [19]  855 	ld	-5 (ix), a
                            856 ;src/funciones.c:201: bg = ataque;
   04CA DD 71 FA      [19]  857 	ld	-6 (ix), c
   04CD                     858 00105$:
                            859 ;src/funciones.c:204: printConsole(temp, pen, bg);
   04CD DD 4E FC      [19]  860 	ld	c,-4 (ix)
   04D0 DD 46 FD      [19]  861 	ld	b,-3 (ix)
   04D3 DD 66 FA      [19]  862 	ld	h, -6 (ix)
   04D6 DD 6E FB      [19]  863 	ld	l, -5 (ix)
   04D9 E5            [11]  864 	push	hl
   04DA C5            [11]  865 	push	bc
   04DB CDr70r03      [17]  866 	call	_printConsole
   04DE DD F9         [10]  867 	ld	sp,ix
   04E0 DD E1         [14]  868 	pop	ix
   04E2 C9            [10]  869 	ret
   04E3                     870 ___str_3:
   04E3 25 2D 39 73 20 41   871 	.ascii "%-9s ATT %02d"
        54 54 20 25 30 32
        64
   04F0 00                  872 	.db 0x00
   04F1                     873 ___str_4:
   04F1 25 2D 39 73 20 48   874 	.ascii "%-9s HP=>%02d"
        50 3D 3E 25 30 32
        64
   04FE 00                  875 	.db 0x00
   04FF                     876 ___str_5:
   04FF 25 2D 39 73 20 44   877 	.ascii "%-9s DIED! "
        49 45 44 21 20
   050A 00                  878 	.db 0x00
                            879 ;src/funciones.c:207: void defender(TStats *a) {
                            880 ;	---------------------------------
                            881 ; Function defender
                            882 ; ---------------------------------
   050B                     883 _defender::
   050B DD E5         [15]  884 	push	ix
   050D DD 21 00 00   [14]  885 	ld	ix,#0
   0511 DD 39         [15]  886 	add	ix,sp
   0513 21 E5 FF      [10]  887 	ld	hl, #-27
   0516 39            [11]  888 	add	hl, sp
   0517 F9            [ 6]  889 	ld	sp, hl
                            890 ;src/funciones.c:210: pen = 0;
   0518 DD 36 E5 00   [19]  891 	ld	-27 (ix), #0x00
                            892 ;src/funciones.c:211: bg = 2;
   051C DD 36 E6 02   [19]  893 	ld	-26 (ix), #0x02
                            894 ;src/funciones.c:212: if ((u16) a->sprite == (u16) G_mendo)  {
   0520 DD 4E 04      [19]  895 	ld	c,4 (ix)
   0523 DD 46 05      [19]  896 	ld	b,5 (ix)
   0526 69            [ 4]  897 	ld	l, c
   0527 60            [ 4]  898 	ld	h, b
   0528 11 12 00      [10]  899 	ld	de, #0x0012
   052B 19            [11]  900 	add	hl, de
   052C 5E            [ 7]  901 	ld	e, (hl)
   052D 23            [ 6]  902 	inc	hl
   052E 56            [ 7]  903 	ld	d, (hl)
   052F DD 36 FEr00   [19]  904 	ld	-2 (ix), #<(_G_mendo)
   0533 DD 36 FFs00   [19]  905 	ld	-1 (ix), #>(_G_mendo)
   0537 7B            [ 4]  906 	ld	a, e
   0538 DD 96 FE      [19]  907 	sub	a, -2 (ix)
   053B 20 0E         [12]  908 	jr	NZ,00102$
   053D 7A            [ 4]  909 	ld	a, d
   053E DD 96 FF      [19]  910 	sub	a, -1 (ix)
   0541 20 08         [12]  911 	jr	NZ,00102$
                            912 ;src/funciones.c:213: pen = 2;
   0543 DD 36 E5 02   [19]  913 	ld	-27 (ix), #0x02
                            914 ;src/funciones.c:214: bg = 0;
   0547 DD 36 E6 00   [19]  915 	ld	-26 (ix), #0x00
   054B                     916 00102$:
                            917 ;src/funciones.c:217: if (a->energy + a->defense < a->max_energy)
   054B FD 21 0A 00   [14]  918 	ld	iy, #0x000a
   054F FD 09         [15]  919 	add	iy, bc
   0551 FD 7E 00      [19]  920 	ld	a, 0 (iy)
   0554 DD 77 FE      [19]  921 	ld	-2 (ix), a
   0557 5F            [ 4]  922 	ld	e, a
   0558 16 00         [ 7]  923 	ld	d, #0x00
   055A 69            [ 4]  924 	ld	l, c
   055B 60            [ 4]  925 	ld	h, b
   055C C5            [11]  926 	push	bc
   055D 01 0E 00      [10]  927 	ld	bc, #0x000e
   0560 09            [11]  928 	add	hl, bc
   0561 C1            [10]  929 	pop	bc
   0562 7E            [ 7]  930 	ld	a, (hl)
   0563 DD 77 FD      [19]  931 	ld	-3 (ix), a
   0566 6F            [ 4]  932 	ld	l, a
   0567 26 00         [ 7]  933 	ld	h, #0x00
   0569 19            [11]  934 	add	hl,de
   056A DD 75 FB      [19]  935 	ld	-5 (ix), l
   056D DD 74 FC      [19]  936 	ld	-4 (ix), h
   0570 69            [ 4]  937 	ld	l, c
   0571 60            [ 4]  938 	ld	h, b
   0572 11 0B 00      [10]  939 	ld	de, #0x000b
   0575 19            [11]  940 	add	hl, de
   0576 5E            [ 7]  941 	ld	e, (hl)
   0577 6B            [ 4]  942 	ld	l, e
   0578 16 00         [ 7]  943 	ld	d, #0x00
   057A DD 7E FB      [19]  944 	ld	a, -5 (ix)
   057D 95            [ 4]  945 	sub	a, l
   057E DD 7E FC      [19]  946 	ld	a, -4 (ix)
   0581 9A            [ 4]  947 	sbc	a, d
   0582 E2r87r05      [10]  948 	jp	PO, 00124$
   0585 EE 80         [ 7]  949 	xor	a, #0x80
   0587                     950 00124$:
   0587 F2r8Fr05      [10]  951 	jp	P, 00104$
                            952 ;src/funciones.c:218: healed = a->defense;
   058A DD 5E FD      [19]  953 	ld	e, -3 (ix)
   058D 18 05         [12]  954 	jr	00105$
   058F                     955 00104$:
                            956 ;src/funciones.c:220: healed = a->max_energy - a->energy;
   058F 7B            [ 4]  957 	ld	a, e
   0590 DD 96 FE      [19]  958 	sub	a, -2 (ix)
   0593 5F            [ 4]  959 	ld	e, a
   0594                     960 00105$:
                            961 ;src/funciones.c:222: a->energy = a->energy + healed;
   0594 DD 7E FE      [19]  962 	ld	a, -2 (ix)
   0597 83            [ 4]  963 	add	a, e
   0598 FD 77 00      [19]  964 	ld	0 (iy), a
                            965 ;src/funciones.c:224: if (healed) {
   059B 7B            [ 4]  966 	ld	a, e
   059C B7            [ 4]  967 	or	a, a
   059D 28 2A         [12]  968 	jr	Z,00108$
                            969 ;src/funciones.c:225: sprintf(temp, "%-9s ^ %02dHP",a->name, healed);
   059F 16 00         [ 7]  970 	ld	d, #0x00
   05A1 21 02 00      [10]  971 	ld	hl, #0x0002
   05A4 39            [11]  972 	add	hl, sp
   05A5 E5            [11]  973 	push	hl
   05A6 FD E1         [14]  974 	pop	iy
   05A8 E5            [11]  975 	push	hl
   05A9 D5            [11]  976 	push	de
   05AA C5            [11]  977 	push	bc
   05AB 01rCEr05      [10]  978 	ld	bc, #___str_6
   05AE C5            [11]  979 	push	bc
   05AF FD E5         [15]  980 	push	iy
   05B1 CDr00r00      [17]  981 	call	_sprintf
   05B4 21 08 00      [10]  982 	ld	hl, #8
   05B7 39            [11]  983 	add	hl, sp
   05B8 F9            [ 6]  984 	ld	sp, hl
   05B9 E1            [10]  985 	pop	hl
                            986 ;src/funciones.c:226: printConsole(temp, pen, bg);
   05BA 4D            [ 4]  987 	ld	c, l
   05BB 44            [ 4]  988 	ld	b, h
   05BC DD 66 E6      [19]  989 	ld	h, -26 (ix)
   05BF DD 6E E5      [19]  990 	ld	l, -27 (ix)
   05C2 E5            [11]  991 	push	hl
   05C3 C5            [11]  992 	push	bc
   05C4 CDr70r03      [17]  993 	call	_printConsole
   05C7 F1            [10]  994 	pop	af
   05C8 F1            [10]  995 	pop	af
   05C9                     996 00108$:
   05C9 DD F9         [10]  997 	ld	sp, ix
   05CB DD E1         [14]  998 	pop	ix
   05CD C9            [10]  999 	ret
   05CE                    1000 ___str_6:
   05CE 25 2D 39 73 20 5E  1001 	.ascii "%-9s ^ %02dHP"
        20 25 30 32 64 48
        50
   05DB 00                 1002 	.db 0x00
                           1003 ;src/funciones.c:230: void drawPotion(){
                           1004 ;	---------------------------------
                           1005 ; Function drawPotion
                           1006 ; ---------------------------------
   05DC                    1007 _drawPotion::
                           1008 ;src/funciones.c:231: cpct_drawSpriteMasked (G_pocion, cpctm_screenPtr (CPCT_VMEM_START, 28, 144), 2,16);
   05DC 21 02 10      [10] 1009 	ld	hl, #0x1002
   05DF E5            [11] 1010 	push	hl
   05E0 21 BC C5      [10] 1011 	ld	hl, #0xc5bc
   05E3 E5            [11] 1012 	push	hl
   05E4 21r00r00      [10] 1013 	ld	hl, #_G_pocion
   05E7 E5            [11] 1014 	push	hl
   05E8 CDr00r00      [17] 1015 	call	_cpct_drawSpriteMasked
   05EB C9            [10] 1016 	ret
                           1017 	.area _CODE
                           1018 	.area _INITIALIZER
                           1019 	.area _CABS (ABS)

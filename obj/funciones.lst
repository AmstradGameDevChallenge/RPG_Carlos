                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (CYGWIN)
                              4 ;--------------------------------------------------------
                              5 	.module funciones
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _drawPotion
                             12 	.globl _defender
                             13 	.globl _atacar
                             14 	.globl _printConsole
                             15 	.globl _printLevel
                             16 	.globl _printStats
                             17 	.globl _dibujarEscenario
                             18 	.globl _dibujarMarcoInterior
                             19 	.globl _dibujarMarcoExterior
                             20 	.globl _pausaTecladoLibre
                             21 	.globl _efecto_pliegue
                             22 	.globl _pausa
                             23 	.globl _abs
                             24 	.globl _sprintf
                             25 	.globl _cpct_etm_setTileset2x4
                             26 	.globl _cpct_etm_drawTileBox2x4
                             27 	.globl _cpct_getRandom_mxor_u8
                             28 	.globl _cpct_setCRTCReg
                             29 	.globl _cpct_getScreenPtr
                             30 	.globl _cpct_drawStringM1
                             31 	.globl _cpct_setDrawCharM1
                             32 	.globl _cpct_drawSpriteMasked
                             33 	.globl _cpct_drawSprite
                             34 	.globl _cpct_drawSolidBox
                             35 	.globl _cpct_px2byteM1
                             36 	.globl _cpct_isAnyKeyPressed_f
                             37 	.globl _cpct_scanKeyboard_f
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DATA
                             45 ;--------------------------------------------------------
                             46 ; ram data
                             47 ;--------------------------------------------------------
                             48 	.area _INITIALIZED
                             49 ;--------------------------------------------------------
                             50 ; absolute external ram data
                             51 ;--------------------------------------------------------
                             52 	.area _DABS (ABS)
                             53 ;--------------------------------------------------------
                             54 ; global & static initialisations
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _GSINIT
                             58 	.area _GSFINAL
                             59 	.area _GSINIT
                             60 ;--------------------------------------------------------
                             61 ; Home
                             62 ;--------------------------------------------------------
                             63 	.area _HOME
                             64 	.area _HOME
                             65 ;--------------------------------------------------------
                             66 ; code
                             67 ;--------------------------------------------------------
                             68 	.area _CODE
                             69 ;src/funciones.c:18: u8 abs (i8 valor){
                             70 ;	---------------------------------
                             71 ; Function abs
                             72 ; ---------------------------------
   0000                      73 _abs::
                             74 ;src/funciones.c:19: return (valor > 0 ? valor : -valor);
   0000 AF            [ 4]   75 	xor	a, a
   0001 FD 21 02 00   [14]   76 	ld	iy, #2
   0005 FD 39         [15]   77 	add	iy, sp
   0007 FD 96 00      [19]   78 	sub	a, 0 (iy)
   000A E2r0Fr00      [10]   79 	jp	PO, 00109$
   000D EE 80         [ 7]   80 	xor	a, #0x80
   000F                      81 00109$:
   000F F2r1Cr00      [10]   82 	jp	P, 00103$
   0012 FD 21 02 00   [14]   83 	ld	iy, #2
   0016 FD 39         [15]   84 	add	iy, sp
   0018 FD 6E 00      [19]   85 	ld	l, 0 (iy)
   001B C9            [10]   86 	ret
   001C                      87 00103$:
   001C AF            [ 4]   88 	xor	a, a
   001D FD 21 02 00   [14]   89 	ld	iy, #2
   0021 FD 39         [15]   90 	add	iy, sp
   0023 FD 96 00      [19]   91 	sub	a, 0 (iy)
   0026 6F            [ 4]   92 	ld	l, a
   0027 C9            [10]   93 	ret
                             94 ;src/funciones.c:22: void pausa(u16 ciclos) {
                             95 ;	---------------------------------
                             96 ; Function pausa
                             97 ; ---------------------------------
   0028                      98 _pausa::
                             99 ;src/funciones.c:25: for (i = 0; i < ciclos; i++)
   0028 01 00 00      [10]  100 	ld	bc, #0x0000
   002B                     101 00103$:
   002B 21 02 00      [10]  102 	ld	hl, #2
   002E 39            [11]  103 	add	hl, sp
   002F 79            [ 4]  104 	ld	a, c
   0030 96            [ 7]  105 	sub	a, (hl)
   0031 78            [ 4]  106 	ld	a, b
   0032 23            [ 6]  107 	inc	hl
   0033 9E            [ 7]  108 	sbc	a, (hl)
   0034 D0            [11]  109 	ret	NC
   0035 03            [ 6]  110 	inc	bc
   0036 18 F3         [12]  111 	jr	00103$
                            112 ;src/funciones.c:29: void efecto_pliegue(u8 modo) {
                            113 ;	---------------------------------
                            114 ; Function efecto_pliegue
                            115 ; ---------------------------------
   0038                     116 _efecto_pliegue::
                            117 ;src/funciones.c:32: i = 200;
   0038 06 C8         [ 7]  118 	ld	b, #0xc8
                            119 ;src/funciones.c:33: if (modo)
   003A 21 02 00      [10]  120 	ld	hl, #2+0
   003D 39            [11]  121 	add	hl, sp
   003E 7E            [ 7]  122 	ld	a, (hl)
   003F B7            [ 4]  123 	or	a, a
   0040 28 02         [12]  124 	jr	Z,00108$
                            125 ;src/funciones.c:34: i = 1;
   0042 06 01         [ 7]  126 	ld	b, #0x01
                            127 ;src/funciones.c:36: do {
   0044                     128 00108$:
                            129 ;src/funciones.c:37: cpct_setCRTCReg (1, i/5);   //Cambiar nº columnas por pantalla (1-40)
   0044 C5            [11]  130 	push	bc
   0045 3E 05         [ 7]  131 	ld	a, #0x05
   0047 F5            [11]  132 	push	af
   0048 33            [ 6]  133 	inc	sp
   0049 C5            [11]  134 	push	bc
   004A 33            [ 6]  135 	inc	sp
   004B CDr00r00      [17]  136 	call	__divuchar
   004E F1            [10]  137 	pop	af
   004F 55            [ 4]  138 	ld	d, l
   0050 1E 01         [ 7]  139 	ld	e, #0x01
   0052 D5            [11]  140 	push	de
   0053 CDr00r00      [17]  141 	call	_cpct_setCRTCReg
   0056 C1            [10]  142 	pop	bc
                            143 ;src/funciones.c:38: cpct_setCRTCReg (6, i/8);   //Cambiar nº de filas por pantallas (1-25)
   0057 50            [ 4]  144 	ld	d, b
   0058 CB 3A         [ 8]  145 	srl	d
   005A CB 3A         [ 8]  146 	srl	d
   005C CB 3A         [ 8]  147 	srl	d
   005E C5            [11]  148 	push	bc
   005F 1E 06         [ 7]  149 	ld	e, #0x06
   0061 D5            [11]  150 	push	de
   0062 CDr00r00      [17]  151 	call	_cpct_setCRTCReg
   0065 C1            [10]  152 	pop	bc
                            153 ;src/funciones.c:40: for (j = 0; j < 255; j++)
   0066 0E FF         [ 7]  154 	ld	c, #0xff
   0068                     155 00113$:
   0068 59            [ 4]  156 	ld	e, c
   0069 1D            [ 4]  157 	dec	e
   006A 7B            [ 4]  158 	ld	a,e
   006B 4F            [ 4]  159 	ld	c,a
   006C B7            [ 4]  160 	or	a, a
   006D 20 F9         [12]  161 	jr	NZ,00113$
                            162 ;src/funciones.c:43: if (modo) {
   006F 21 02 00      [10]  163 	ld	hl, #2+0
   0072 39            [11]  164 	add	hl, sp
   0073 7E            [ 7]  165 	ld	a, (hl)
   0074 B7            [ 4]  166 	or	a, a
   0075 28 03         [12]  167 	jr	Z,00105$
                            168 ;src/funciones.c:44: i++;
   0077 04            [ 4]  169 	inc	b
   0078 18 01         [12]  170 	jr	00109$
   007A                     171 00105$:
                            172 ;src/funciones.c:46: i--; 
   007A 05            [ 4]  173 	dec	b
   007B                     174 00109$:
                            175 ;src/funciones.c:48: } while (i > 0 && i <= 200);
   007B 78            [ 4]  176 	ld	a, b
   007C B7            [ 4]  177 	or	a, a
   007D C8            [11]  178 	ret	Z
   007E 3E C8         [ 7]  179 	ld	a, #0xc8
   0080 90            [ 4]  180 	sub	a, b
   0081 30 C1         [12]  181 	jr	NC,00108$
   0083 C9            [10]  182 	ret
                            183 ;src/funciones.c:52: void pausaTecladoLibre(){
                            184 ;	---------------------------------
                            185 ; Function pausaTecladoLibre
                            186 ; ---------------------------------
   0084                     187 _pausaTecladoLibre::
                            188 ;src/funciones.c:53: while (cpct_isAnyKeyPressed_f ()) { //Asegurarnos que se ha dejado de pulsar la tecla anterior 
   0084                     189 00101$:
   0084 CDr00r00      [17]  190 	call	_cpct_isAnyKeyPressed_f
   0087 7D            [ 4]  191 	ld	a, l
   0088 B7            [ 4]  192 	or	a, a
   0089 C8            [11]  193 	ret	Z
                            194 ;src/funciones.c:54: cpct_scanKeyboard_f();
   008A CDr00r00      [17]  195 	call	_cpct_scanKeyboard_f
   008D 18 F5         [12]  196 	jr	00101$
                            197 ;src/funciones.c:58: void dibujarMarcoExterior (){
                            198 ;	---------------------------------
                            199 ; Function dibujarMarcoExterior
                            200 ; ---------------------------------
   008F                     201 _dibujarMarcoExterior::
   008F DD E5         [15]  202 	push	ix
   0091 DD 21 00 00   [14]  203 	ld	ix,#0
   0095 DD 39         [15]  204 	add	ix,sp
   0097 F5            [11]  205 	push	af
   0098 F5            [11]  206 	push	af
                            207 ;src/funciones.c:63: tile = (u8*) &G_tile_cruzada[0];
   0099 DD 36 FCr00   [19]  208 	ld	-4 (ix), #<(_G_tile_cruzada)
   009D DD 36 FDs00   [19]  209 	ld	-3 (ix), #>(_G_tile_cruzada)
                            210 ;src/funciones.c:64: if ((nivel/10) == 1)
   00A1 3E 0A         [ 7]  211 	ld	a, #0x0a
   00A3 F5            [11]  212 	push	af
   00A4 33            [ 6]  213 	inc	sp
   00A5 3Ar00r00      [13]  214 	ld	a, (_nivel)
   00A8 F5            [11]  215 	push	af
   00A9 33            [ 6]  216 	inc	sp
   00AA CDr00r00      [17]  217 	call	__divuchar
   00AD F1            [10]  218 	pop	af
   00AE 2D            [ 4]  219 	dec	l
   00AF 20 08         [12]  220 	jr	NZ,00112$
                            221 ;src/funciones.c:65: tile = (u8*) &G_tile_cruzada[0];
   00B1 DD 36 FCr00   [19]  222 	ld	-4 (ix), #<(_G_tile_cruzada)
   00B5 DD 36 FDs00   [19]  223 	ld	-3 (ix), #>(_G_tile_cruzada)
                            224 ;src/funciones.c:69: for (i=0; i < 80; i += 4) {
   00B9                     225 00112$:
   00B9 06 00         [ 7]  226 	ld	b, #0x00
   00BB                     227 00105$:
                            228 ;src/funciones.c:70: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, i,   0), 4, 16);
   00BB C5            [11]  229 	push	bc
   00BC AF            [ 4]  230 	xor	a, a
   00BD F5            [11]  231 	push	af
   00BE 33            [ 6]  232 	inc	sp
   00BF C5            [11]  233 	push	bc
   00C0 33            [ 6]  234 	inc	sp
   00C1 21 00 C0      [10]  235 	ld	hl, #0xc000
   00C4 E5            [11]  236 	push	hl
   00C5 CDr00r00      [17]  237 	call	_cpct_getScreenPtr
   00C8 C1            [10]  238 	pop	bc
   00C9 DD 7E FC      [19]  239 	ld	a, -4 (ix)
   00CC DD 77 FE      [19]  240 	ld	-2 (ix), a
   00CF DD 7E FD      [19]  241 	ld	a, -3 (ix)
   00D2 DD 77 FF      [19]  242 	ld	-1 (ix), a
   00D5 C5            [11]  243 	push	bc
   00D6 11 04 10      [10]  244 	ld	de, #0x1004
   00D9 D5            [11]  245 	push	de
   00DA E5            [11]  246 	push	hl
   00DB DD 6E FE      [19]  247 	ld	l,-2 (ix)
   00DE DD 66 FF      [19]  248 	ld	h,-1 (ix)
   00E1 E5            [11]  249 	push	hl
   00E2 CDr00r00      [17]  250 	call	_cpct_drawSprite
   00E5 C1            [10]  251 	pop	bc
                            252 ;src/funciones.c:71: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, i, 176), 4, 16);
   00E6 C5            [11]  253 	push	bc
   00E7 3E B0         [ 7]  254 	ld	a, #0xb0
   00E9 F5            [11]  255 	push	af
   00EA 33            [ 6]  256 	inc	sp
   00EB C5            [11]  257 	push	bc
   00EC 33            [ 6]  258 	inc	sp
   00ED 21 00 C0      [10]  259 	ld	hl, #0xc000
   00F0 E5            [11]  260 	push	hl
   00F1 CDr00r00      [17]  261 	call	_cpct_getScreenPtr
   00F4 11 04 10      [10]  262 	ld	de, #0x1004
   00F7 D5            [11]  263 	push	de
   00F8 E5            [11]  264 	push	hl
   00F9 DD 6E FE      [19]  265 	ld	l,-2 (ix)
   00FC DD 66 FF      [19]  266 	ld	h,-1 (ix)
   00FF E5            [11]  267 	push	hl
   0100 CDr00r00      [17]  268 	call	_cpct_drawSprite
   0103 C1            [10]  269 	pop	bc
                            270 ;src/funciones.c:69: for (i=0; i < 80; i += 4) {
   0104 04            [ 4]  271 	inc	b
   0105 04            [ 4]  272 	inc	b
   0106 04            [ 4]  273 	inc	b
   0107 04            [ 4]  274 	inc	b
   0108 78            [ 4]  275 	ld	a, b
   0109 D6 50         [ 7]  276 	sub	a, #0x50
   010B 38 AE         [12]  277 	jr	C,00105$
                            278 ;src/funciones.c:74: for (i=16; i < 176; i += 16 ){
   010D 06 10         [ 7]  279 	ld	b, #0x10
   010F                     280 00107$:
                            281 ;src/funciones.c:75: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, 0, i), 4, 16);
   010F C5            [11]  282 	push	bc
   0110 C5            [11]  283 	push	bc
   0111 33            [ 6]  284 	inc	sp
   0112 AF            [ 4]  285 	xor	a, a
   0113 F5            [11]  286 	push	af
   0114 33            [ 6]  287 	inc	sp
   0115 21 00 C0      [10]  288 	ld	hl, #0xc000
   0118 E5            [11]  289 	push	hl
   0119 CDr00r00      [17]  290 	call	_cpct_getScreenPtr
   011C 11 04 10      [10]  291 	ld	de, #0x1004
   011F D5            [11]  292 	push	de
   0120 E5            [11]  293 	push	hl
   0121 DD 6E FE      [19]  294 	ld	l,-2 (ix)
   0124 DD 66 FF      [19]  295 	ld	h,-1 (ix)
   0127 E5            [11]  296 	push	hl
   0128 CDr00r00      [17]  297 	call	_cpct_drawSprite
   012B C1            [10]  298 	pop	bc
                            299 ;src/funciones.c:76: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START,76, i), 4, 16);  
   012C C5            [11]  300 	push	bc
   012D C5            [11]  301 	push	bc
   012E 33            [ 6]  302 	inc	sp
   012F 3E 4C         [ 7]  303 	ld	a, #0x4c
   0131 F5            [11]  304 	push	af
   0132 33            [ 6]  305 	inc	sp
   0133 21 00 C0      [10]  306 	ld	hl, #0xc000
   0136 E5            [11]  307 	push	hl
   0137 CDr00r00      [17]  308 	call	_cpct_getScreenPtr
   013A 11 04 10      [10]  309 	ld	de, #0x1004
   013D D5            [11]  310 	push	de
   013E E5            [11]  311 	push	hl
   013F DD 6E FE      [19]  312 	ld	l,-2 (ix)
   0142 DD 66 FF      [19]  313 	ld	h,-1 (ix)
   0145 E5            [11]  314 	push	hl
   0146 CDr00r00      [17]  315 	call	_cpct_drawSprite
   0149 C1            [10]  316 	pop	bc
                            317 ;src/funciones.c:74: for (i=16; i < 176; i += 16 ){
   014A 78            [ 4]  318 	ld	a, b
   014B C6 10         [ 7]  319 	add	a, #0x10
   014D 47            [ 4]  320 	ld	b,a
   014E D6 B0         [ 7]  321 	sub	a, #0xb0
   0150 38 BD         [12]  322 	jr	C,00107$
   0152 DD F9         [10]  323 	ld	sp, ix
   0154 DD E1         [14]  324 	pop	ix
   0156 C9            [10]  325 	ret
                            326 ;src/funciones.c:81: void dibujarMarcoInterior (){
                            327 ;	---------------------------------
                            328 ; Function dibujarMarcoInterior
                            329 ; ---------------------------------
   0157                     330 _dibujarMarcoInterior::
   0157 DD E5         [15]  331 	push	ix
   0159 DD 21 00 00   [14]  332 	ld	ix,#0
   015D DD 39         [15]  333 	add	ix,sp
   015F F5            [11]  334 	push	af
                            335 ;src/funciones.c:86: tile = (u8*) &G_tile_cruzada[0];
   0160 01r00r00      [10]  336 	ld	bc, #_G_tile_cruzada
                            337 ;src/funciones.c:87: if ((nivel/10) == 1)
   0163 C5            [11]  338 	push	bc
   0164 3E 0A         [ 7]  339 	ld	a, #0x0a
   0166 F5            [11]  340 	push	af
   0167 33            [ 6]  341 	inc	sp
   0168 3Ar00r00      [13]  342 	ld	a, (_nivel)
   016B F5            [11]  343 	push	af
   016C 33            [ 6]  344 	inc	sp
   016D CDr00r00      [17]  345 	call	__divuchar
   0170 F1            [10]  346 	pop	af
   0171 C1            [10]  347 	pop	bc
   0172 2D            [ 4]  348 	dec	l
   0173 20 03         [12]  349 	jr	NZ,00112$
                            350 ;src/funciones.c:88: tile = (u8*) &G_tile_cruzada[0];
   0175 01r00r00      [10]  351 	ld	bc, #_G_tile_cruzada
                            352 ;src/funciones.c:92: for (i=0; i < 80; i += 4) {
   0178                     353 00112$:
   0178 1E 00         [ 7]  354 	ld	e, #0x00
   017A                     355 00105$:
                            356 ;src/funciones.c:93: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START, i,  48), 4, 16);
   017A C5            [11]  357 	push	bc
   017B D5            [11]  358 	push	de
   017C 16 30         [ 7]  359 	ld	d,#0x30
   017E D5            [11]  360 	push	de
   017F 21 00 C0      [10]  361 	ld	hl, #0xc000
   0182 E5            [11]  362 	push	hl
   0183 CDr00r00      [17]  363 	call	_cpct_getScreenPtr
   0186 D1            [10]  364 	pop	de
   0187 C1            [10]  365 	pop	bc
   0188 E5            [11]  366 	push	hl
   0189 FD E1         [14]  367 	pop	iy
   018B 33            [ 6]  368 	inc	sp
   018C 33            [ 6]  369 	inc	sp
   018D C5            [11]  370 	push	bc
   018E C5            [11]  371 	push	bc
   018F D5            [11]  372 	push	de
   0190 21 04 10      [10]  373 	ld	hl, #0x1004
   0193 E5            [11]  374 	push	hl
   0194 FD E5         [15]  375 	push	iy
   0196 DD 6E FE      [19]  376 	ld	l,-2 (ix)
   0199 DD 66 FF      [19]  377 	ld	h,-1 (ix)
   019C E5            [11]  378 	push	hl
   019D CDr00r00      [17]  379 	call	_cpct_drawSprite
   01A0 D1            [10]  380 	pop	de
   01A1 C1            [10]  381 	pop	bc
                            382 ;src/funciones.c:92: for (i=0; i < 80; i += 4) {
   01A2 1C            [ 4]  383 	inc	e
   01A3 1C            [ 4]  384 	inc	e
   01A4 1C            [ 4]  385 	inc	e
   01A5 1C            [ 4]  386 	inc	e
   01A6 7B            [ 4]  387 	ld	a, e
   01A7 D6 50         [ 7]  388 	sub	a, #0x50
   01A9 38 CF         [12]  389 	jr	C,00105$
                            390 ;src/funciones.c:96: for (i=64; i < 176; i += 16 ){
   01AB 06 40         [ 7]  391 	ld	b, #0x40
   01AD                     392 00107$:
                            393 ;src/funciones.c:97: cpct_drawSprite (tile,  cpct_getScreenPtr (CPCT_VMEM_START,40, i), 4, 16);
   01AD C5            [11]  394 	push	bc
   01AE C5            [11]  395 	push	bc
   01AF 33            [ 6]  396 	inc	sp
   01B0 3E 28         [ 7]  397 	ld	a, #0x28
   01B2 F5            [11]  398 	push	af
   01B3 33            [ 6]  399 	inc	sp
   01B4 21 00 C0      [10]  400 	ld	hl, #0xc000
   01B7 E5            [11]  401 	push	hl
   01B8 CDr00r00      [17]  402 	call	_cpct_getScreenPtr
   01BB 11 04 10      [10]  403 	ld	de, #0x1004
   01BE D5            [11]  404 	push	de
   01BF E5            [11]  405 	push	hl
   01C0 DD 6E FE      [19]  406 	ld	l,-2 (ix)
   01C3 DD 66 FF      [19]  407 	ld	h,-1 (ix)
   01C6 E5            [11]  408 	push	hl
   01C7 CDr00r00      [17]  409 	call	_cpct_drawSprite
   01CA C1            [10]  410 	pop	bc
                            411 ;src/funciones.c:96: for (i=64; i < 176; i += 16 ){
   01CB 78            [ 4]  412 	ld	a, b
   01CC C6 10         [ 7]  413 	add	a, #0x10
   01CE 47            [ 4]  414 	ld	b,a
   01CF D6 B0         [ 7]  415 	sub	a, #0xb0
   01D1 38 DA         [12]  416 	jr	C,00107$
                            417 ;src/funciones.c:101: cpct_drawSolidBox (cpctm_screenPtr (CPCT_VMEM_START, 43, 56), cpct_px2byteM1 (0, 0, 0, 0), 34, 128); //borrar pantalla
   01D3 21 00 00      [10]  418 	ld	hl, #0x0000
   01D6 E5            [11]  419 	push	hl
   01D7 2E 00         [ 7]  420 	ld	l, #0x00
   01D9 E5            [11]  421 	push	hl
   01DA CDr00r00      [17]  422 	call	_cpct_px2byteM1
   01DD F1            [10]  423 	pop	af
   01DE F1            [10]  424 	pop	af
   01DF 45            [ 4]  425 	ld	b, l
   01E0 21 22 80      [10]  426 	ld	hl, #0x8022
   01E3 E5            [11]  427 	push	hl
   01E4 C5            [11]  428 	push	bc
   01E5 33            [ 6]  429 	inc	sp
   01E6 21 5B C2      [10]  430 	ld	hl, #0xc25b
   01E9 E5            [11]  431 	push	hl
   01EA CDr00r00      [17]  432 	call	_cpct_drawSolidBox
   01ED DD F9         [10]  433 	ld	sp,ix
   01EF DD E1         [14]  434 	pop	ix
   01F1 C9            [10]  435 	ret
                            436 ;src/funciones.c:104: void dibujarEscenario(){
                            437 ;	---------------------------------
                            438 ; Function dibujarEscenario
                            439 ; ---------------------------------
   01F2                     440 _dibujarEscenario::
                            441 ;src/funciones.c:107: cpct_etm_setTileset2x4(tileset1);
   01F2 21r00r00      [10]  442 	ld	hl, #_tileset1
   01F5 CDr00r00      [17]  443 	call	_cpct_etm_setTileset2x4
                            444 ;src/funciones.c:108: if (nivel > 10)
   01F8 3E 0A         [ 7]  445 	ld	a, #0x0a
   01FA FD 21r00r00   [14]  446 	ld	iy, #_nivel
   01FE FD 96 00      [19]  447 	sub	a, 0 (iy)
   0201 30 06         [12]  448 	jr	NC,00102$
                            449 ;src/funciones.c:109: cpct_etm_setTileset2x4(tileset1);
   0203 21r00r00      [10]  450 	ld	hl, #_tileset1
   0206 CDr00r00      [17]  451 	call	_cpct_etm_setTileset2x4
   0209                     452 00102$:
                            453 ;src/funciones.c:111: mapa = (u8*) (&g_mapa01[0] + ((nivel-1) * 504));
   0209 01r00r00      [10]  454 	ld	bc, #_g_mapa01+0
   020C 21r00r00      [10]  455 	ld	hl,#_nivel + 0
   020F 5E            [ 7]  456 	ld	e, (hl)
   0210 16 00         [ 7]  457 	ld	d, #0x00
   0212 1B            [ 6]  458 	dec	de
   0213 6B            [ 4]  459 	ld	l, e
   0214 62            [ 4]  460 	ld	h, d
   0215 29            [11]  461 	add	hl, hl
   0216 19            [11]  462 	add	hl, de
   0217 29            [11]  463 	add	hl, hl
   0218 19            [11]  464 	add	hl, de
   0219 29            [11]  465 	add	hl, hl
   021A 19            [11]  466 	add	hl, de
   021B 29            [11]  467 	add	hl, hl
   021C 19            [11]  468 	add	hl, de
   021D 29            [11]  469 	add	hl, hl
   021E 19            [11]  470 	add	hl, de
   021F 29            [11]  471 	add	hl, hl
   0220 29            [11]  472 	add	hl, hl
   0221 29            [11]  473 	add	hl, hl
   0222 09            [11]  474 	add	hl, bc
                            475 ;src/funciones.c:113: cpct_etm_drawTilemap2x4 ( g_mapa01_W, g_mapa01_H , INICIO_AREA_JUEGO, mapa);
   0223 E5            [11]  476 	push	hl
   0224 21 84 C2      [10]  477 	ld	hl, #0xc284
   0227 E5            [11]  478 	push	hl
   0228 21 1C 12      [10]  479 	ld	hl, #0x121c
   022B E5            [11]  480 	push	hl
   022C 2E 00         [ 7]  481 	ld	l, #0x00
   022E E5            [11]  482 	push	hl
   022F AF            [ 4]  483 	xor	a, a
   0230 F5            [11]  484 	push	af
   0231 33            [ 6]  485 	inc	sp
   0232 CDr00r00      [17]  486 	call	_cpct_etm_drawTileBox2x4
   0235 C9            [10]  487 	ret
                            488 ;src/funciones.c:117: void printStats(TStats *a) {
                            489 ;	---------------------------------
                            490 ; Function printStats
                            491 ; ---------------------------------
   0236                     492 _printStats::
   0236 DD E5         [15]  493 	push	ix
   0238 DD 21 00 00   [14]  494 	ld	ix,#0
   023C DD 39         [15]  495 	add	ix,sp
   023E 21 D6 FF      [10]  496 	ld	hl, #-42
   0241 39            [11]  497 	add	hl, sp
   0242 F9            [ 6]  498 	ld	sp, hl
                            499 ;src/funciones.c:120: cpct_setDrawCharM1(2, 0);
   0243 21 02 00      [10]  500 	ld	hl, #0x0002
   0246 E5            [11]  501 	push	hl
   0247 CDr00r00      [17]  502 	call	_cpct_setDrawCharM1
                            503 ;src/funciones.c:121: sprintf(temp, "                                    ");
   024A 11rD6r02      [10]  504 	ld	de, #___str_0+0
   024D 21 00 00      [10]  505 	ld	hl, #0x0000
   0250 39            [11]  506 	add	hl, sp
   0251 DD 75 FE      [19]  507 	ld	-2 (ix), l
   0254 DD 74 FF      [19]  508 	ld	-1 (ix), h
   0257 D5            [11]  509 	push	de
   0258 E5            [11]  510 	push	hl
   0259 CDr00r00      [17]  511 	call	_sprintf
   025C F1            [10]  512 	pop	af
   025D F1            [10]  513 	pop	af
                            514 ;src/funciones.c:122: if (a->energy)
   025E DD 4E 04      [19]  515 	ld	c,4 (ix)
   0261 DD 46 05      [19]  516 	ld	b,5 (ix)
   0264 C5            [11]  517 	push	bc
   0265 FD E1         [14]  518 	pop	iy
   0267 FD 5E 0A      [19]  519 	ld	e, 10 (iy)
   026A 7B            [ 4]  520 	ld	a, e
   026B B7            [ 4]  521 	or	a, a
   026C 28 45         [12]  522 	jr	Z,00102$
                            523 ;src/funciones.c:123: sprintf(temp, "%-9s=> HP:%02d. ATT: %02d. DEF: %02d",a->name, a->energy,a->attack,a->defense);
   026E C5            [11]  524 	push	bc
   026F FD E1         [14]  525 	pop	iy
   0271 FD 6E 0E      [19]  526 	ld	l, 14 (iy)
   0274 DD 75 FC      [19]  527 	ld	-4 (ix), l
   0277 DD 36 FD 00   [19]  528 	ld	-3 (ix), #0x00
   027B C5            [11]  529 	push	bc
   027C FD E1         [14]  530 	pop	iy
   027E FD 6E 0C      [19]  531 	ld	l, 12 (iy)
   0281 DD 75 FA      [19]  532 	ld	-6 (ix), l
   0284 DD 36 FB 00   [19]  533 	ld	-5 (ix), #0x00
   0288 16 00         [ 7]  534 	ld	d, #0x00
   028A DD 6E FE      [19]  535 	ld	l,-2 (ix)
   028D DD 66 FF      [19]  536 	ld	h,-1 (ix)
   0290 E5            [11]  537 	push	hl
   0291 FD E1         [14]  538 	pop	iy
   0293 C5            [11]  539 	push	bc
   0294 DD 6E FC      [19]  540 	ld	l,-4 (ix)
   0297 DD 66 FD      [19]  541 	ld	h,-3 (ix)
   029A E5            [11]  542 	push	hl
   029B DD 6E FA      [19]  543 	ld	l,-6 (ix)
   029E DD 66 FB      [19]  544 	ld	h,-5 (ix)
   02A1 E5            [11]  545 	push	hl
   02A2 D5            [11]  546 	push	de
   02A3 C5            [11]  547 	push	bc
   02A4 21rFBr02      [10]  548 	ld	hl, #___str_1
   02A7 E5            [11]  549 	push	hl
   02A8 FD E5         [15]  550 	push	iy
   02AA CDr00r00      [17]  551 	call	_sprintf
   02AD 21 0C 00      [10]  552 	ld	hl, #12
   02B0 39            [11]  553 	add	hl, sp
   02B1 F9            [ 6]  554 	ld	sp, hl
   02B2 C1            [10]  555 	pop	bc
   02B3                     556 00102$:
                            557 ;src/funciones.c:125: cpct_drawStringM1(temp, cpct_getScreenPtr(CPCT_VMEM_START, 4, a->pos_y));
   02B3 C5            [11]  558 	push	bc
   02B4 FD E1         [14]  559 	pop	iy
   02B6 FD 46 11      [19]  560 	ld	b, 17 (iy)
   02B9 C5            [11]  561 	push	bc
   02BA 33            [ 6]  562 	inc	sp
   02BB 3E 04         [ 7]  563 	ld	a, #0x04
   02BD F5            [11]  564 	push	af
   02BE 33            [ 6]  565 	inc	sp
   02BF 21 00 C0      [10]  566 	ld	hl, #0xc000
   02C2 E5            [11]  567 	push	hl
   02C3 CDr00r00      [17]  568 	call	_cpct_getScreenPtr
   02C6 DD 4E FE      [19]  569 	ld	c,-2 (ix)
   02C9 DD 46 FF      [19]  570 	ld	b,-1 (ix)
   02CC E5            [11]  571 	push	hl
   02CD C5            [11]  572 	push	bc
   02CE CDr00r00      [17]  573 	call	_cpct_drawStringM1
   02D1 DD F9         [10]  574 	ld	sp, ix
   02D3 DD E1         [14]  575 	pop	ix
   02D5 C9            [10]  576 	ret
   02D6                     577 ___str_0:
   02D6 20 20 20 20 20 20   578 	.ascii "                                    "
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
   02FA 00                  579 	.db 0x00
   02FB                     580 ___str_1:
   02FB 25 2D 39 73 3D 3E   581 	.ascii "%-9s=> HP:%02d. ATT: %02d. DEF: %02d"
        20 48 50 3A 25 30
        32 64 2E 20 41 54
        54 3A 20 25 30 32
        64 2E 20 44 45 46
        3A 20 25 30 32 64
   031F 00                  582 	.db 0x00
                            583 ;src/funciones.c:128: void printLevel() {
                            584 ;	---------------------------------
                            585 ; Function printLevel
                            586 ; ---------------------------------
   0320                     587 _printLevel::
   0320 DD E5         [15]  588 	push	ix
   0322 DD 21 00 00   [14]  589 	ld	ix,#0
   0326 DD 39         [15]  590 	add	ix,sp
   0328 21 D8 FF      [10]  591 	ld	hl, #-40
   032B 39            [11]  592 	add	hl, sp
   032C F9            [ 6]  593 	ld	sp, hl
                            594 ;src/funciones.c:131: sprintf(temp, "LEVEL: %02d",nivel);
   032D 21r00r00      [10]  595 	ld	hl,#_nivel + 0
   0330 5E            [ 7]  596 	ld	e, (hl)
   0331 16 00         [ 7]  597 	ld	d, #0x00
   0333 21 00 00      [10]  598 	ld	hl, #0x0000
   0336 39            [11]  599 	add	hl, sp
   0337 4D            [ 4]  600 	ld	c, l
   0338 44            [ 4]  601 	ld	b, h
   0339 E5            [11]  602 	push	hl
   033A D5            [11]  603 	push	de
   033B 11r5Dr03      [10]  604 	ld	de, #___str_2
   033E D5            [11]  605 	push	de
   033F C5            [11]  606 	push	bc
   0340 CDr00r00      [17]  607 	call	_sprintf
   0343 21 06 00      [10]  608 	ld	hl, #6
   0346 39            [11]  609 	add	hl, sp
   0347 F9            [ 6]  610 	ld	sp, hl
   0348 01 02 00      [10]  611 	ld	bc, #0x0002
   034B C5            [11]  612 	push	bc
   034C CDr00r00      [17]  613 	call	_cpct_setDrawCharM1
   034F E1            [10]  614 	pop	hl
                            615 ;src/funciones.c:133: cpct_drawStringM1(temp, cpctm_screenPtr(CPCT_VMEM_START, 4, 16));
   0350 01 A4 C0      [10]  616 	ld	bc, #0xc0a4
   0353 C5            [11]  617 	push	bc
   0354 E5            [11]  618 	push	hl
   0355 CDr00r00      [17]  619 	call	_cpct_drawStringM1
   0358 DD F9         [10]  620 	ld	sp, ix
   035A DD E1         [14]  621 	pop	ix
   035C C9            [10]  622 	ret
   035D                     623 ___str_2:
   035D 4C 45 56 45 4C 3A   624 	.ascii "LEVEL: %02d"
        20 25 30 32 64
   0368 00                  625 	.db 0x00
                            626 ;src/funciones.c:136: void printConsole  (void* string, u8 pen, u8 bground) {
                            627 ;	---------------------------------
                            628 ; Function printConsole
                            629 ; ---------------------------------
   0369                     630 _printConsole::
                            631 ;src/funciones.c:137: if (cursorConsola > 175){
   0369 3E AF         [ 7]  632 	ld	a, #0xaf
   036B FD 21r00r00   [14]  633 	ld	iy, #_cursorConsola
   036F FD 96 00      [19]  634 	sub	a, 0 (iy)
   0372 30 2A         [12]  635 	jr	NC,00102$
                            636 ;src/funciones.c:139: pausa(SEGUNDO);
   0374 21 00 80      [10]  637 	ld	hl, #0x8000
   0377 E5            [11]  638 	push	hl
   0378 CDr28r00      [17]  639 	call	_pausa
   037B F1            [10]  640 	pop	af
                            641 ;src/funciones.c:140: cpct_drawSolidBox (cpctm_screenPtr (CPCT_VMEM_START, 43, 56), cpct_px2byteM1 (0, 0, 0, 0), 34, 128); //borrar pantalla
   037C 21 00 00      [10]  642 	ld	hl, #0x0000
   037F E5            [11]  643 	push	hl
   0380 2E 00         [ 7]  644 	ld	l, #0x00
   0382 E5            [11]  645 	push	hl
   0383 CDr00r00      [17]  646 	call	_cpct_px2byteM1
   0386 F1            [10]  647 	pop	af
   0387 F1            [10]  648 	pop	af
   0388 45            [ 4]  649 	ld	b, l
   0389 21 22 80      [10]  650 	ld	hl, #0x8022
   038C E5            [11]  651 	push	hl
   038D C5            [11]  652 	push	bc
   038E 33            [ 6]  653 	inc	sp
   038F 21 5B C2      [10]  654 	ld	hl, #0xc25b
   0392 E5            [11]  655 	push	hl
   0393 CDr00r00      [17]  656 	call	_cpct_drawSolidBox
   0396 F1            [10]  657 	pop	af
   0397 F1            [10]  658 	pop	af
   0398 33            [ 6]  659 	inc	sp
                            660 ;src/funciones.c:141: cursorConsola = 64;
   0399 21r00r00      [10]  661 	ld	hl,#_cursorConsola + 0
   039C 36 40         [10]  662 	ld	(hl), #0x40
   039E                     663 00102$:
                            664 ;src/funciones.c:144: cpct_setDrawCharM1(pen, bground);
   039E 21 05 00      [10]  665 	ld	hl, #5+0
   03A1 39            [11]  666 	add	hl, sp
   03A2 7E            [ 7]  667 	ld	a, (hl)
   03A3 F5            [11]  668 	push	af
   03A4 33            [ 6]  669 	inc	sp
   03A5 21 05 00      [10]  670 	ld	hl, #5+0
   03A8 39            [11]  671 	add	hl, sp
   03A9 7E            [ 7]  672 	ld	a, (hl)
   03AA F5            [11]  673 	push	af
   03AB 33            [ 6]  674 	inc	sp
   03AC CDr00r00      [17]  675 	call	_cpct_setDrawCharM1
                            676 ;src/funciones.c:145: cpct_drawStringM1(string, cpct_getScreenPtr(CPCT_VMEM_START, 44, cursorConsola));
   03AF 3Ar00r00      [13]  677 	ld	a, (_cursorConsola)
   03B2 57            [ 4]  678 	ld	d,a
   03B3 1E 2C         [ 7]  679 	ld	e,#0x2c
   03B5 D5            [11]  680 	push	de
   03B6 21 00 C0      [10]  681 	ld	hl, #0xc000
   03B9 E5            [11]  682 	push	hl
   03BA CDr00r00      [17]  683 	call	_cpct_getScreenPtr
   03BD D1            [10]  684 	pop	de
   03BE C1            [10]  685 	pop	bc
   03BF C5            [11]  686 	push	bc
   03C0 D5            [11]  687 	push	de
   03C1 E5            [11]  688 	push	hl
   03C2 C5            [11]  689 	push	bc
   03C3 CDr00r00      [17]  690 	call	_cpct_drawStringM1
                            691 ;src/funciones.c:146: cursorConsola +=8;
   03C6 21r00r00      [10]  692 	ld	hl, #_cursorConsola
   03C9 7E            [ 7]  693 	ld	a, (hl)
   03CA C6 08         [ 7]  694 	add	a, #0x08
   03CC 77            [ 7]  695 	ld	(hl), a
   03CD C9            [10]  696 	ret
                            697 ;src/funciones.c:149: void atacar(TStats *a, TStats *b) {
                            698 ;	---------------------------------
                            699 ; Function atacar
                            700 ; ---------------------------------
   03CE                     701 _atacar::
   03CE DD E5         [15]  702 	push	ix
   03D0 DD 21 00 00   [14]  703 	ld	ix,#0
   03D4 DD 39         [15]  704 	add	ix,sp
   03D6 21 E6 FF      [10]  705 	ld	hl, #-26
   03D9 39            [11]  706 	add	hl, sp
   03DA F9            [ 6]  707 	ld	sp, hl
                            708 ;src/funciones.c:153: pen = 0;
   03DB DD 36 FB 00   [19]  709 	ld	-5 (ix), #0x00
                            710 ;src/funciones.c:154: bg = 2;
   03DF DD 36 FA 02   [19]  711 	ld	-6 (ix), #0x02
                            712 ;src/funciones.c:155: if ((u16) a->sprite == (u16) G_mendo)  {
   03E3 DD 4E 04      [19]  713 	ld	c,4 (ix)
   03E6 DD 46 05      [19]  714 	ld	b,5 (ix)
   03E9 69            [ 4]  715 	ld	l, c
   03EA 60            [ 4]  716 	ld	h, b
   03EB 11 12 00      [10]  717 	ld	de, #0x0012
   03EE 19            [11]  718 	add	hl, de
   03EF 5E            [ 7]  719 	ld	e, (hl)
   03F0 23            [ 6]  720 	inc	hl
   03F1 56            [ 7]  721 	ld	d, (hl)
   03F2 DD 36 FEr00   [19]  722 	ld	-2 (ix), #<(_G_mendo)
   03F6 DD 36 FFs00   [19]  723 	ld	-1 (ix), #>(_G_mendo)
   03FA 7B            [ 4]  724 	ld	a, e
   03FB DD 96 FE      [19]  725 	sub	a, -2 (ix)
   03FE 20 0E         [12]  726 	jr	NZ,00102$
   0400 7A            [ 4]  727 	ld	a, d
   0401 DD 96 FF      [19]  728 	sub	a, -1 (ix)
   0404 20 08         [12]  729 	jr	NZ,00102$
                            730 ;src/funciones.c:156: pen = 2;
   0406 DD 36 FB 02   [19]  731 	ld	-5 (ix), #0x02
                            732 ;src/funciones.c:157: bg = 0;
   040A DD 36 FA 00   [19]  733 	ld	-6 (ix), #0x00
   040E                     734 00102$:
                            735 ;src/funciones.c:161: ataque = a->attack + (2*(cpct_rand()%a->force)) - a->force;
   040E C5            [11]  736 	push	bc
   040F FD E1         [14]  737 	pop	iy
   0411 FD 7E 0C      [19]  738 	ld	a, 12 (iy)
   0414 DD 77 FE      [19]  739 	ld	-2 (ix), a
   0417 C5            [11]  740 	push	bc
   0418 CDr00r00      [17]  741 	call	_cpct_getRandom_mxor_u8
   041B 5D            [ 4]  742 	ld	e, l
   041C C1            [10]  743 	pop	bc
   041D C5            [11]  744 	push	bc
   041E FD E1         [14]  745 	pop	iy
   0420 FD 56 0D      [19]  746 	ld	d, 13 (iy)
   0423 C5            [11]  747 	push	bc
   0424 D5            [11]  748 	push	de
   0425 D5            [11]  749 	push	de
   0426 CDr00r00      [17]  750 	call	__moduchar
   0429 F1            [10]  751 	pop	af
   042A D1            [10]  752 	pop	de
   042B C1            [10]  753 	pop	bc
   042C CB 25         [ 8]  754 	sla	l
   042E DD 7E FE      [19]  755 	ld	a, -2 (ix)
   0431 85            [ 4]  756 	add	a, l
   0432 92            [ 4]  757 	sub	a, d
                            758 ;src/funciones.c:162: sprintf(temp, "%-9s ATT %02d",a->name, ataque);
   0433 DD 77 FE      [19]  759 	ld	-2 (ix), a
   0436 5F            [ 4]  760 	ld	e, a
   0437 16 00         [ 7]  761 	ld	d, #0x00
   0439 21 00 00      [10]  762 	ld	hl, #0x0000
   043C 39            [11]  763 	add	hl, sp
   043D DD 75 FC      [19]  764 	ld	-4 (ix), l
   0440 DD 74 FD      [19]  765 	ld	-3 (ix), h
   0443 D5            [11]  766 	push	de
   0444 C5            [11]  767 	push	bc
   0445 01rDCr04      [10]  768 	ld	bc, #___str_3
   0448 C5            [11]  769 	push	bc
   0449 E5            [11]  770 	push	hl
   044A CDr00r00      [17]  771 	call	_sprintf
   044D 21 08 00      [10]  772 	ld	hl, #8
   0450 39            [11]  773 	add	hl, sp
   0451 F9            [ 6]  774 	ld	sp, hl
                            775 ;src/funciones.c:163: printConsole(temp, pen, bg);
   0452 DD 4E FC      [19]  776 	ld	c,-4 (ix)
   0455 DD 46 FD      [19]  777 	ld	b,-3 (ix)
   0458 DD 66 FA      [19]  778 	ld	h, -6 (ix)
   045B DD 6E FB      [19]  779 	ld	l, -5 (ix)
   045E E5            [11]  780 	push	hl
   045F C5            [11]  781 	push	bc
   0460 CDr69r03      [17]  782 	call	_printConsole
   0463 F1            [10]  783 	pop	af
   0464 F1            [10]  784 	pop	af
                            785 ;src/funciones.c:165: if (ataque < b->energy) {
   0465 DD 4E 06      [19]  786 	ld	c,6 (ix)
   0468 DD 46 07      [19]  787 	ld	b,7 (ix)
   046B 21 0A 00      [10]  788 	ld	hl, #0x000a
   046E 09            [11]  789 	add	hl, bc
   046F 5E            [ 7]  790 	ld	e, (hl)
   0470 DD 7E FE      [19]  791 	ld	a, -2 (ix)
   0473 93            [ 4]  792 	sub	a, e
   0474 30 1F         [12]  793 	jr	NC,00104$
                            794 ;src/funciones.c:166: b->energy = b->energy - ataque;
   0476 7B            [ 4]  795 	ld	a, e
   0477 DD 96 FE      [19]  796 	sub	a, -2 (ix)
   047A 5F            [ 4]  797 	ld	e, a
   047B 73            [ 7]  798 	ld	(hl), e
                            799 ;src/funciones.c:167: sprintf(temp, "%-9s HP=>%02d",b->name, b->energy);
   047C 16 00         [ 7]  800 	ld	d, #0x00
   047E DD 6E FC      [19]  801 	ld	l,-4 (ix)
   0481 DD 66 FD      [19]  802 	ld	h,-3 (ix)
   0484 D5            [11]  803 	push	de
   0485 C5            [11]  804 	push	bc
   0486 01rEAr04      [10]  805 	ld	bc, #___str_4
   0489 C5            [11]  806 	push	bc
   048A E5            [11]  807 	push	hl
   048B CDr00r00      [17]  808 	call	_sprintf
   048E 21 08 00      [10]  809 	ld	hl, #8
   0491 39            [11]  810 	add	hl, sp
   0492 F9            [ 6]  811 	ld	sp, hl
   0493 18 31         [12]  812 	jr	00105$
   0495                     813 00104$:
                            814 ;src/funciones.c:169: b->energy = 0;
   0495 36 00         [10]  815 	ld	(hl), #0x00
                            816 ;src/funciones.c:170: sprintf(temp, "%-9s DIED! ",b->name, b->energy);
   0497 5E            [ 7]  817 	ld	e, (hl)
   0498 16 00         [ 7]  818 	ld	d, #0x00
   049A DD 6E FC      [19]  819 	ld	l,-4 (ix)
   049D DD 66 FD      [19]  820 	ld	h,-3 (ix)
   04A0 D5            [11]  821 	push	de
   04A1 C5            [11]  822 	push	bc
   04A2 01rF8r04      [10]  823 	ld	bc, #___str_5
   04A5 C5            [11]  824 	push	bc
   04A6 E5            [11]  825 	push	hl
   04A7 CDr00r00      [17]  826 	call	_sprintf
   04AA 21 08 00      [10]  827 	ld	hl, #8
   04AD 39            [11]  828 	add	hl, sp
   04AE F9            [ 6]  829 	ld	sp, hl
                            830 ;src/funciones.c:171: printStats(b);
   04AF DD 6E 06      [19]  831 	ld	l,6 (ix)
   04B2 DD 66 07      [19]  832 	ld	h,7 (ix)
   04B5 E5            [11]  833 	push	hl
   04B6 CDr36r02      [17]  834 	call	_printStats
   04B9 F1            [10]  835 	pop	af
                            836 ;src/funciones.c:173: ataque = pen;
   04BA DD 4E FB      [19]  837 	ld	c, -5 (ix)
                            838 ;src/funciones.c:174: pen = bg;
   04BD DD 7E FA      [19]  839 	ld	a, -6 (ix)
   04C0 DD 77 FB      [19]  840 	ld	-5 (ix), a
                            841 ;src/funciones.c:175: bg = ataque;
   04C3 DD 71 FA      [19]  842 	ld	-6 (ix), c
   04C6                     843 00105$:
                            844 ;src/funciones.c:178: printConsole(temp, pen, bg);
   04C6 DD 4E FC      [19]  845 	ld	c,-4 (ix)
   04C9 DD 46 FD      [19]  846 	ld	b,-3 (ix)
   04CC DD 66 FA      [19]  847 	ld	h, -6 (ix)
   04CF DD 6E FB      [19]  848 	ld	l, -5 (ix)
   04D2 E5            [11]  849 	push	hl
   04D3 C5            [11]  850 	push	bc
   04D4 CDr69r03      [17]  851 	call	_printConsole
   04D7 DD F9         [10]  852 	ld	sp,ix
   04D9 DD E1         [14]  853 	pop	ix
   04DB C9            [10]  854 	ret
   04DC                     855 ___str_3:
   04DC 25 2D 39 73 20 41   856 	.ascii "%-9s ATT %02d"
        54 54 20 25 30 32
        64
   04E9 00                  857 	.db 0x00
   04EA                     858 ___str_4:
   04EA 25 2D 39 73 20 48   859 	.ascii "%-9s HP=>%02d"
        50 3D 3E 25 30 32
        64
   04F7 00                  860 	.db 0x00
   04F8                     861 ___str_5:
   04F8 25 2D 39 73 20 44   862 	.ascii "%-9s DIED! "
        49 45 44 21 20
   0503 00                  863 	.db 0x00
                            864 ;src/funciones.c:181: void defender(TStats *a) {
                            865 ;	---------------------------------
                            866 ; Function defender
                            867 ; ---------------------------------
   0504                     868 _defender::
   0504 DD E5         [15]  869 	push	ix
   0506 DD 21 00 00   [14]  870 	ld	ix,#0
   050A DD 39         [15]  871 	add	ix,sp
   050C 21 E5 FF      [10]  872 	ld	hl, #-27
   050F 39            [11]  873 	add	hl, sp
   0510 F9            [ 6]  874 	ld	sp, hl
                            875 ;src/funciones.c:184: pen = 0;
   0511 DD 36 E5 00   [19]  876 	ld	-27 (ix), #0x00
                            877 ;src/funciones.c:185: bg = 2;
   0515 DD 36 E6 02   [19]  878 	ld	-26 (ix), #0x02
                            879 ;src/funciones.c:186: if ((u16) a->sprite == (u16) G_mendo)  {
   0519 DD 4E 04      [19]  880 	ld	c,4 (ix)
   051C DD 46 05      [19]  881 	ld	b,5 (ix)
   051F 69            [ 4]  882 	ld	l, c
   0520 60            [ 4]  883 	ld	h, b
   0521 11 12 00      [10]  884 	ld	de, #0x0012
   0524 19            [11]  885 	add	hl, de
   0525 5E            [ 7]  886 	ld	e, (hl)
   0526 23            [ 6]  887 	inc	hl
   0527 56            [ 7]  888 	ld	d, (hl)
   0528 DD 36 FEr00   [19]  889 	ld	-2 (ix), #<(_G_mendo)
   052C DD 36 FFs00   [19]  890 	ld	-1 (ix), #>(_G_mendo)
   0530 7B            [ 4]  891 	ld	a, e
   0531 DD 96 FE      [19]  892 	sub	a, -2 (ix)
   0534 20 0E         [12]  893 	jr	NZ,00102$
   0536 7A            [ 4]  894 	ld	a, d
   0537 DD 96 FF      [19]  895 	sub	a, -1 (ix)
   053A 20 08         [12]  896 	jr	NZ,00102$
                            897 ;src/funciones.c:187: pen = 2;
   053C DD 36 E5 02   [19]  898 	ld	-27 (ix), #0x02
                            899 ;src/funciones.c:188: bg = 0;
   0540 DD 36 E6 00   [19]  900 	ld	-26 (ix), #0x00
   0544                     901 00102$:
                            902 ;src/funciones.c:191: if (a->energy + a->defense < a->max_energy)
   0544 FD 21 0A 00   [14]  903 	ld	iy, #0x000a
   0548 FD 09         [15]  904 	add	iy, bc
   054A FD 7E 00      [19]  905 	ld	a, 0 (iy)
   054D DD 77 FE      [19]  906 	ld	-2 (ix), a
   0550 5F            [ 4]  907 	ld	e, a
   0551 16 00         [ 7]  908 	ld	d, #0x00
   0553 69            [ 4]  909 	ld	l, c
   0554 60            [ 4]  910 	ld	h, b
   0555 C5            [11]  911 	push	bc
   0556 01 0E 00      [10]  912 	ld	bc, #0x000e
   0559 09            [11]  913 	add	hl, bc
   055A C1            [10]  914 	pop	bc
   055B 7E            [ 7]  915 	ld	a, (hl)
   055C DD 77 FD      [19]  916 	ld	-3 (ix), a
   055F 6F            [ 4]  917 	ld	l, a
   0560 26 00         [ 7]  918 	ld	h, #0x00
   0562 19            [11]  919 	add	hl,de
   0563 DD 75 FB      [19]  920 	ld	-5 (ix), l
   0566 DD 74 FC      [19]  921 	ld	-4 (ix), h
   0569 69            [ 4]  922 	ld	l, c
   056A 60            [ 4]  923 	ld	h, b
   056B 11 0B 00      [10]  924 	ld	de, #0x000b
   056E 19            [11]  925 	add	hl, de
   056F 5E            [ 7]  926 	ld	e, (hl)
   0570 6B            [ 4]  927 	ld	l, e
   0571 16 00         [ 7]  928 	ld	d, #0x00
   0573 DD 7E FB      [19]  929 	ld	a, -5 (ix)
   0576 95            [ 4]  930 	sub	a, l
   0577 DD 7E FC      [19]  931 	ld	a, -4 (ix)
   057A 9A            [ 4]  932 	sbc	a, d
   057B E2r80r05      [10]  933 	jp	PO, 00124$
   057E EE 80         [ 7]  934 	xor	a, #0x80
   0580                     935 00124$:
   0580 F2r88r05      [10]  936 	jp	P, 00104$
                            937 ;src/funciones.c:192: healed = a->defense;
   0583 DD 5E FD      [19]  938 	ld	e, -3 (ix)
   0586 18 05         [12]  939 	jr	00105$
   0588                     940 00104$:
                            941 ;src/funciones.c:194: healed = a->max_energy - a->energy;
   0588 7B            [ 4]  942 	ld	a, e
   0589 DD 96 FE      [19]  943 	sub	a, -2 (ix)
   058C 5F            [ 4]  944 	ld	e, a
   058D                     945 00105$:
                            946 ;src/funciones.c:196: a->energy = a->energy + healed;
   058D DD 7E FE      [19]  947 	ld	a, -2 (ix)
   0590 83            [ 4]  948 	add	a, e
   0591 FD 77 00      [19]  949 	ld	0 (iy), a
                            950 ;src/funciones.c:198: if (healed) {
   0594 7B            [ 4]  951 	ld	a, e
   0595 B7            [ 4]  952 	or	a, a
   0596 28 2E         [12]  953 	jr	Z,00108$
                            954 ;src/funciones.c:199: sprintf(temp, "%-9s %c %02dHP",a->name, 240,healed);
   0598 16 00         [ 7]  955 	ld	d, #0x00
   059A 21 02 00      [10]  956 	ld	hl, #0x0002
   059D 39            [11]  957 	add	hl, sp
   059E E5            [11]  958 	push	hl
   059F FD E1         [14]  959 	pop	iy
   05A1 E5            [11]  960 	push	hl
   05A2 D5            [11]  961 	push	de
   05A3 11 F0 00      [10]  962 	ld	de, #0x00f0
   05A6 D5            [11]  963 	push	de
   05A7 C5            [11]  964 	push	bc
   05A8 01rCBr05      [10]  965 	ld	bc, #___str_6
   05AB C5            [11]  966 	push	bc
   05AC FD E5         [15]  967 	push	iy
   05AE CDr00r00      [17]  968 	call	_sprintf
   05B1 21 0A 00      [10]  969 	ld	hl, #10
   05B4 39            [11]  970 	add	hl, sp
   05B5 F9            [ 6]  971 	ld	sp, hl
   05B6 E1            [10]  972 	pop	hl
                            973 ;src/funciones.c:200: printConsole(temp, pen, bg);
   05B7 4D            [ 4]  974 	ld	c, l
   05B8 44            [ 4]  975 	ld	b, h
   05B9 DD 66 E6      [19]  976 	ld	h, -26 (ix)
   05BC DD 6E E5      [19]  977 	ld	l, -27 (ix)
   05BF E5            [11]  978 	push	hl
   05C0 C5            [11]  979 	push	bc
   05C1 CDr69r03      [17]  980 	call	_printConsole
   05C4 F1            [10]  981 	pop	af
   05C5 F1            [10]  982 	pop	af
   05C6                     983 00108$:
   05C6 DD F9         [10]  984 	ld	sp, ix
   05C8 DD E1         [14]  985 	pop	ix
   05CA C9            [10]  986 	ret
   05CB                     987 ___str_6:
   05CB 25 2D 39 73 20 25   988 	.ascii "%-9s %c %02dHP"
        63 20 25 30 32 64
        48 50
   05D9 00                  989 	.db 0x00
                            990 ;src/funciones.c:204: void drawPotion(){
                            991 ;	---------------------------------
                            992 ; Function drawPotion
                            993 ; ---------------------------------
   05DA                     994 _drawPotion::
                            995 ;src/funciones.c:205: cpct_drawSpriteMasked (G_pocion, cpctm_screenPtr (CPCT_VMEM_START, 28, 144), 2,16);
   05DA 21 02 10      [10]  996 	ld	hl, #0x1002
   05DD E5            [11]  997 	push	hl
   05DE 21 BC C5      [10]  998 	ld	hl, #0xc5bc
   05E1 E5            [11]  999 	push	hl
   05E2 21r00r00      [10] 1000 	ld	hl, #_G_pocion
   05E5 E5            [11] 1001 	push	hl
   05E6 CDr00r00      [17] 1002 	call	_cpct_drawSpriteMasked
   05E9 C9            [10] 1003 	ret
                           1004 	.area _CODE
                           1005 	.area _INITIALIZER
                           1006 	.area _CABS (ABS)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (CYGWIN)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _game
                             13 	.globl _defense
                             14 	.globl _attack
                             15 	.globl _showConsole
                             16 	.globl _printStats
                             17 	.globl _initGoblin
                             18 	.globl _initPlayer
                             19 	.globl _sprintf
                             20 	.globl _cpct_restoreState_mxor_u8
                             21 	.globl _cpct_setSeed_mxor
                             22 	.globl _cpct_getRandom_mxor_u8
                             23 	.globl _cpct_getScreenPtr
                             24 	.globl _cpct_setPALColour
                             25 	.globl _cpct_setPalette
                             26 	.globl _cpct_setVideoMode
                             27 	.globl _cpct_drawStringM1
                             28 	.globl _cpct_setDrawCharM1
                             29 	.globl _cpct_isAnyKeyPressed_f
                             30 	.globl _cpct_isKeyPressed
                             31 	.globl _cpct_scanKeyboard_f
                             32 	.globl _cpct_memset
                             33 	.globl _cpct_disableFirmware
                             34 	.globl _cursorPrint
                             35 	.globl _goblin
                             36 	.globl _player
                             37 	.globl _paletaM1
                             38 ;--------------------------------------------------------
                             39 ; special function registers
                             40 ;--------------------------------------------------------
                             41 ;--------------------------------------------------------
                             42 ; ram data
                             43 ;--------------------------------------------------------
                             44 	.area _DATA
   0000                      45 _player::
   0000                      46 	.ds 14
   000E                      47 _goblin::
   000E                      48 	.ds 14
   001C                      49 _cursorPrint::
   001C                      50 	.ds 1
                             51 ;--------------------------------------------------------
                             52 ; ram data
                             53 ;--------------------------------------------------------
                             54 	.area _INITIALIZED
                             55 ;--------------------------------------------------------
                             56 ; absolute external ram data
                             57 ;--------------------------------------------------------
                             58 	.area _DABS (ABS)
                             59 ;--------------------------------------------------------
                             60 ; global & static initialisations
                             61 ;--------------------------------------------------------
                             62 	.area _HOME
                             63 	.area _GSINIT
                             64 	.area _GSFINAL
                             65 	.area _GSINIT
                             66 ;--------------------------------------------------------
                             67 ; Home
                             68 ;--------------------------------------------------------
                             69 	.area _HOME
                             70 	.area _HOME
                             71 ;--------------------------------------------------------
                             72 ; code
                             73 ;--------------------------------------------------------
                             74 	.area _CODE
                             75 ;src/main.c:32: void initPlayer(){
                             76 ;	---------------------------------
                             77 ; Function initPlayer
                             78 ; ---------------------------------
   0000                      79 _initPlayer::
                             80 ;src/main.c:33: strcpy(player.name,"PLAYER");
   0000 11r00r00      [10]   81 	ld	de, #_player
   0003 21r25r00      [10]   82 	ld	hl, #___str_0
   0006 AF            [ 4]   83 	xor	a, a
   0007                      84 00103$:
   0007 BE            [ 7]   85 	cp	a, (hl)
   0008 ED A0         [16]   86 	ldi
   000A 20 FB         [12]   87 	jr	NZ, 00103$
                             88 ;src/main.c:34: player.max_energy = 99;
   000C 21r0Br00      [10]   89 	ld	hl, #_player + 11
   000F 36 63         [10]   90 	ld	(hl), #0x63
                             91 ;src/main.c:35: player.energy = player.max_energy;
   0011 01r0Ar00      [10]   92 	ld	bc, #_player + 10
   0014 7E            [ 7]   93 	ld	a, (hl)
   0015 02            [ 7]   94 	ld	(bc), a
                             95 ;src/main.c:36: player.attack = 30;
   0016 21r0Cr00      [10]   96 	ld	hl, #(_player + 0x000c)
   0019 36 1E         [10]   97 	ld	(hl), #0x1e
                             98 ;src/main.c:37: player.defense = 15;
   001B 21r0Dr00      [10]   99 	ld	hl, #(_player + 0x000d)
   001E 36 0F         [10]  100 	ld	(hl), #0x0f
   0020 C9            [10]  101 	ret
   0021                     102 _paletaM1:
   0021 54                  103 	.db #0x54	; 84	'T'
   0022 43                  104 	.db #0x43	; 67	'C'
   0023 4C                  105 	.db #0x4c	; 76	'L'
   0024 4B                  106 	.db #0x4b	; 75	'K'
   0025                     107 ___str_0:
   0025 50 4C 41 59 45 52   108 	.ascii "PLAYER"
   002B 00                  109 	.db 0x00
                            110 ;src/main.c:40: void initGoblin(){
                            111 ;	---------------------------------
                            112 ; Function initGoblin
                            113 ; ---------------------------------
   002C                     114 _initGoblin::
                            115 ;src/main.c:41: strcpy(goblin.name,"GOBLIN");
   002C 11r0Er00      [10]  116 	ld	de, #_goblin
   002F 21r4Dr00      [10]  117 	ld	hl, #___str_1
   0032 AF            [ 4]  118 	xor	a, a
   0033                     119 00103$:
   0033 BE            [ 7]  120 	cp	a, (hl)
   0034 ED A0         [16]  121 	ldi
   0036 20 FB         [12]  122 	jr	NZ, 00103$
                            123 ;src/main.c:42: goblin.max_energy = 90;
   0038 21r19r00      [10]  124 	ld	hl, #_goblin + 11
   003B 36 5A         [10]  125 	ld	(hl), #0x5a
                            126 ;src/main.c:43: goblin.energy = goblin.max_energy;
   003D 01r18r00      [10]  127 	ld	bc, #_goblin + 10
   0040 7E            [ 7]  128 	ld	a, (hl)
   0041 02            [ 7]  129 	ld	(bc), a
                            130 ;src/main.c:44: goblin.attack = 20;
   0042 21r1Ar00      [10]  131 	ld	hl, #(_goblin + 0x000c)
   0045 36 14         [10]  132 	ld	(hl), #0x14
                            133 ;src/main.c:45: goblin.defense = 10;
   0047 21r1Br00      [10]  134 	ld	hl, #(_goblin + 0x000d)
   004A 36 0A         [10]  135 	ld	(hl), #0x0a
   004C C9            [10]  136 	ret
   004D                     137 ___str_1:
   004D 47 4F 42 4C 49 4E   138 	.ascii "GOBLIN"
   0053 00                  139 	.db 0x00
                            140 ;src/main.c:48: void printStats(TStats *a) {
                            141 ;	---------------------------------
                            142 ; Function printStats
                            143 ; ---------------------------------
   0054                     144 _printStats::
   0054 DD E5         [15]  145 	push	ix
   0056 DD 21 00 00   [14]  146 	ld	ix,#0
   005A DD 39         [15]  147 	add	ix,sp
   005C 21 D1 FF      [10]  148 	ld	hl, #-47
   005F 39            [11]  149 	add	hl, sp
   0060 F9            [ 6]  150 	ld	sp, hl
                            151 ;src/main.c:51: u8 posy = 10;
   0061 DD 36 D1 0A   [19]  152 	ld	-47 (ix), #0x0a
                            153 ;src/main.c:52: sprintf(temp, "%s %02d. ATTACK: %02d. DEFENSE: %02d",a->name, a->energy,a->attack,a->defense);
   0065 DD 4E 04      [19]  154 	ld	c,4 (ix)
   0068 DD 46 05      [19]  155 	ld	b,5 (ix)
   006B C5            [11]  156 	push	bc
   006C FD E1         [14]  157 	pop	iy
   006E FD 5E 0D      [19]  158 	ld	e, 13 (iy)
   0071 16 00         [ 7]  159 	ld	d, #0x00
   0073 C5            [11]  160 	push	bc
   0074 FD E1         [14]  161 	pop	iy
   0076 FD 6E 0C      [19]  162 	ld	l, 12 (iy)
   0079 DD 75 FE      [19]  163 	ld	-2 (ix), l
   007C DD 36 FF 00   [19]  164 	ld	-1 (ix), #0x00
   0080 C5            [11]  165 	push	bc
   0081 FD E1         [14]  166 	pop	iy
   0083 FD 6E 0A      [19]  167 	ld	l, 10 (iy)
   0086 DD 75 FC      [19]  168 	ld	-4 (ix), l
   0089 DD 36 FD 00   [19]  169 	ld	-3 (ix), #0x00
   008D 21 01 00      [10]  170 	ld	hl, #0x0001
   0090 39            [11]  171 	add	hl, sp
   0091 DD 75 FA      [19]  172 	ld	-6 (ix), l
   0094 DD 74 FB      [19]  173 	ld	-5 (ix), h
   0097 D5            [11]  174 	push	de
   0098 DD 5E FE      [19]  175 	ld	e,-2 (ix)
   009B DD 56 FF      [19]  176 	ld	d,-1 (ix)
   009E D5            [11]  177 	push	de
   009F DD 5E FC      [19]  178 	ld	e,-4 (ix)
   00A2 DD 56 FD      [19]  179 	ld	d,-3 (ix)
   00A5 D5            [11]  180 	push	de
   00A6 C5            [11]  181 	push	bc
   00A7 01rE5r00      [10]  182 	ld	bc, #___str_2
   00AA C5            [11]  183 	push	bc
   00AB E5            [11]  184 	push	hl
   00AC CDr00r00      [17]  185 	call	_sprintf
   00AF 21 0C 00      [10]  186 	ld	hl, #12
   00B2 39            [11]  187 	add	hl, sp
   00B3 F9            [ 6]  188 	ld	sp, hl
                            189 ;src/main.c:54: if (a == &player) 
   00B4 DD 7E 04      [19]  190 	ld	a, 4 (ix)
   00B7 D6r00         [ 7]  191 	sub	a, #<(_player)
   00B9 20 0B         [12]  192 	jr	NZ,00102$
   00BB DD 7E 05      [19]  193 	ld	a, 5 (ix)
   00BE D6s00         [ 7]  194 	sub	a, #>(_player)
   00C0 20 04         [12]  195 	jr	NZ,00102$
                            196 ;src/main.c:55: posy = 0;
   00C2 DD 36 D1 00   [19]  197 	ld	-47 (ix), #0x00
   00C6                     198 00102$:
                            199 ;src/main.c:57: cpct_drawStringM1(temp, cpct_getScreenPtr(CPCT_VMEM_START, 0, posy));
   00C6 DD 7E D1      [19]  200 	ld	a, -47 (ix)
   00C9 F5            [11]  201 	push	af
   00CA 33            [ 6]  202 	inc	sp
   00CB AF            [ 4]  203 	xor	a, a
   00CC F5            [11]  204 	push	af
   00CD 33            [ 6]  205 	inc	sp
   00CE 21 00 C0      [10]  206 	ld	hl, #0xc000
   00D1 E5            [11]  207 	push	hl
   00D2 CDr00r00      [17]  208 	call	_cpct_getScreenPtr
   00D5 DD 4E FA      [19]  209 	ld	c,-6 (ix)
   00D8 DD 46 FB      [19]  210 	ld	b,-5 (ix)
   00DB E5            [11]  211 	push	hl
   00DC C5            [11]  212 	push	bc
   00DD CDr00r00      [17]  213 	call	_cpct_drawStringM1
   00E0 DD F9         [10]  214 	ld	sp, ix
   00E2 DD E1         [14]  215 	pop	ix
   00E4 C9            [10]  216 	ret
   00E5                     217 ___str_2:
   00E5 25 73 20 25 30 32   218 	.ascii "%s %02d. ATTACK: %02d. DEFENSE: %02d"
        64 2E 20 41 54 54
        41 43 4B 3A 20 25
        30 32 64 2E 20 44
        45 46 45 4E 53 45
        3A 20 25 30 32 64
   0109 00                  219 	.db 0x00
                            220 ;src/main.c:61: void showConsole  (void* string) {
                            221 ;	---------------------------------
                            222 ; Function showConsole
                            223 ; ---------------------------------
   010A                     224 _showConsole::
   010A DD E5         [15]  225 	push	ix
   010C DD 21 00 00   [14]  226 	ld	ix,#0
   0110 DD 39         [15]  227 	add	ix,sp
                            228 ;src/main.c:62: if (cursorPrint > 190){
   0112 3E BE         [ 7]  229 	ld	a, #0xbe
   0114 FD 21r1Cr00   [14]  230 	ld	iy, #_cursorPrint
   0118 FD 96 00      [19]  231 	sub	a, 0 (iy)
   011B 30 12         [12]  232 	jr	NC,00102$
                            233 ;src/main.c:63: cpct_clearScreen(0x00);
   011D 21 00 40      [10]  234 	ld	hl, #0x4000
   0120 E5            [11]  235 	push	hl
   0121 AF            [ 4]  236 	xor	a, a
   0122 F5            [11]  237 	push	af
   0123 33            [ 6]  238 	inc	sp
   0124 26 C0         [ 7]  239 	ld	h, #0xc0
   0126 E5            [11]  240 	push	hl
   0127 CDr00r00      [17]  241 	call	_cpct_memset
                            242 ;src/main.c:64: cursorPrint = 30;
   012A 21r1Cr00      [10]  243 	ld	hl,#_cursorPrint + 0
   012D 36 1E         [10]  244 	ld	(hl), #0x1e
   012F                     245 00102$:
                            246 ;src/main.c:67: cpct_drawStringM1(string, cpct_getScreenPtr(CPCT_VMEM_START, 0, cursorPrint));
   012F 3Ar1Cr00      [13]  247 	ld	a, (_cursorPrint)
   0132 F5            [11]  248 	push	af
   0133 33            [ 6]  249 	inc	sp
   0134 AF            [ 4]  250 	xor	a, a
   0135 F5            [11]  251 	push	af
   0136 33            [ 6]  252 	inc	sp
   0137 21 00 C0      [10]  253 	ld	hl, #0xc000
   013A E5            [11]  254 	push	hl
   013B CDr00r00      [17]  255 	call	_cpct_getScreenPtr
   013E DD 4E 04      [19]  256 	ld	c,4 (ix)
   0141 DD 46 05      [19]  257 	ld	b,5 (ix)
   0144 E5            [11]  258 	push	hl
   0145 C5            [11]  259 	push	bc
   0146 CDr00r00      [17]  260 	call	_cpct_drawStringM1
                            261 ;src/main.c:68: cursorPrint +=8;
   0149 21r1Cr00      [10]  262 	ld	hl, #_cursorPrint
   014C 7E            [ 7]  263 	ld	a, (hl)
   014D C6 08         [ 7]  264 	add	a, #0x08
   014F 77            [ 7]  265 	ld	(hl), a
                            266 ;src/main.c:70: cpct_setDrawCharM1(3, 0);
   0150 21 03 00      [10]  267 	ld	hl, #0x0003
   0153 E5            [11]  268 	push	hl
   0154 CDr00r00      [17]  269 	call	_cpct_setDrawCharM1
                            270 ;src/main.c:71: printStats(&player);
   0157 21r00r00      [10]  271 	ld	hl, #_player
   015A E5            [11]  272 	push	hl
   015B CDr54r00      [17]  273 	call	_printStats
                            274 ;src/main.c:72: printStats(&goblin);
   015E 21r0Er00      [10]  275 	ld	hl, #_goblin
   0161 E3            [19]  276 	ex	(sp),hl
   0162 CDr54r00      [17]  277 	call	_printStats
   0165 F1            [10]  278 	pop	af
                            279 ;src/main.c:73: cpct_drawStringM1("========================================", cpct_getScreenPtr(CPCT_VMEM_START, 0, 20));
   0166 21 00 14      [10]  280 	ld	hl, #0x1400
   0169 E5            [11]  281 	push	hl
   016A 26 C0         [ 7]  282 	ld	h, #0xc0
   016C E5            [11]  283 	push	hl
   016D CDr00r00      [17]  284 	call	_cpct_getScreenPtr
   0170 01r7Br01      [10]  285 	ld	bc, #___str_3+0
   0173 E5            [11]  286 	push	hl
   0174 C5            [11]  287 	push	bc
   0175 CDr00r00      [17]  288 	call	_cpct_drawStringM1
   0178 DD E1         [14]  289 	pop	ix
   017A C9            [10]  290 	ret
   017B                     291 ___str_3:
   017B 3D 3D 3D 3D 3D 3D   292 	.ascii "========================================"
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D
   01A3 00                  293 	.db 0x00
                            294 ;src/main.c:77: void attack(TStats *a, TStats *b) {
                            295 ;	---------------------------------
                            296 ; Function attack
                            297 ; ---------------------------------
   01A4                     298 _attack::
   01A4 DD E5         [15]  299 	push	ix
   01A6 DD 21 00 00   [14]  300 	ld	ix,#0
   01AA DD 39         [15]  301 	add	ix,sp
   01AC 21 D5 FF      [10]  302 	ld	hl, #-43
   01AF 39            [11]  303 	add	hl, sp
   01B0 F9            [ 6]  304 	ld	sp, hl
                            305 ;src/main.c:80: if (a->attack < b->energy) 
   01B1 DD 7E 04      [19]  306 	ld	a, 4 (ix)
   01B4 DD 77 FE      [19]  307 	ld	-2 (ix), a
   01B7 DD 7E 05      [19]  308 	ld	a, 5 (ix)
   01BA DD 77 FF      [19]  309 	ld	-1 (ix), a
   01BD DD 7E FE      [19]  310 	ld	a, -2 (ix)
   01C0 C6 0C         [ 7]  311 	add	a, #0x0c
   01C2 4F            [ 4]  312 	ld	c, a
   01C3 DD 7E FF      [19]  313 	ld	a, -1 (ix)
   01C6 CE 00         [ 7]  314 	adc	a, #0x00
   01C8 47            [ 4]  315 	ld	b, a
   01C9 0A            [ 7]  316 	ld	a, (bc)
   01CA DD 77 FD      [19]  317 	ld	-3 (ix), a
   01CD DD 5E 06      [19]  318 	ld	e,6 (ix)
   01D0 DD 56 07      [19]  319 	ld	d,7 (ix)
   01D3 21 0A 00      [10]  320 	ld	hl, #0x000a
   01D6 19            [11]  321 	add	hl,de
   01D7 EB            [ 4]  322 	ex	de,hl
   01D8 1A            [ 7]  323 	ld	a, (de)
   01D9 6F            [ 4]  324 	ld	l, a
   01DA DD 7E FD      [19]  325 	ld	a, -3 (ix)
   01DD 95            [ 4]  326 	sub	a, l
   01DE 30 07         [12]  327 	jr	NC,00102$
                            328 ;src/main.c:81: b->energy = b->energy - a->attack;
   01E0 7D            [ 4]  329 	ld	a, l
   01E1 DD 96 FD      [19]  330 	sub	a, -3 (ix)
   01E4 12            [ 7]  331 	ld	(de), a
   01E5 18 02         [12]  332 	jr	00103$
   01E7                     333 00102$:
                            334 ;src/main.c:83: b->energy = 0;
   01E7 AF            [ 4]  335 	xor	a, a
   01E8 12            [ 7]  336 	ld	(de), a
   01E9                     337 00103$:
                            338 ;src/main.c:85: sprintf(temp, "%s attacks %02d.",a->name, a->attack);
   01E9 0A            [ 7]  339 	ld	a, (bc)
   01EA 4F            [ 4]  340 	ld	c, a
   01EB 06 00         [ 7]  341 	ld	b, #0x00
   01ED 21 00 00      [10]  342 	ld	hl, #0x0000
   01F0 39            [11]  343 	add	hl, sp
   01F1 5D            [ 4]  344 	ld	e, l
   01F2 54            [ 4]  345 	ld	d, h
   01F3 E5            [11]  346 	push	hl
   01F4 C5            [11]  347 	push	bc
   01F5 DD 4E FE      [19]  348 	ld	c,-2 (ix)
   01F8 DD 46 FF      [19]  349 	ld	b,-1 (ix)
   01FB C5            [11]  350 	push	bc
   01FC 01r18r02      [10]  351 	ld	bc, #___str_4
   01FF C5            [11]  352 	push	bc
   0200 D5            [11]  353 	push	de
   0201 CDr00r00      [17]  354 	call	_sprintf
   0204 21 08 00      [10]  355 	ld	hl, #8
   0207 39            [11]  356 	add	hl, sp
   0208 F9            [ 6]  357 	ld	sp, hl
   0209 01 02 00      [10]  358 	ld	bc, #0x0002
   020C C5            [11]  359 	push	bc
   020D CDr00r00      [17]  360 	call	_cpct_setDrawCharM1
   0210 CDr0Ar01      [17]  361 	call	_showConsole
   0213 DD F9         [10]  362 	ld	sp,ix
   0215 DD E1         [14]  363 	pop	ix
   0217 C9            [10]  364 	ret
   0218                     365 ___str_4:
   0218 25 73 20 61 74 74   366 	.ascii "%s attacks %02d."
        61 63 6B 73 20 25
        30 32 64 2E
   0228 00                  367 	.db 0x00
                            368 ;src/main.c:91: void defense(TStats *a) {
                            369 ;	---------------------------------
                            370 ; Function defense
                            371 ; ---------------------------------
   0229                     372 _defense::
   0229 DD E5         [15]  373 	push	ix
   022B DD 21 00 00   [14]  374 	ld	ix,#0
   022F DD 39         [15]  375 	add	ix,sp
   0231 21 D5 FF      [10]  376 	ld	hl, #-43
   0234 39            [11]  377 	add	hl, sp
   0235 F9            [ 6]  378 	ld	sp, hl
                            379 ;src/main.c:94: healed = 0;
   0236 DD 36 FD 00   [19]  380 	ld	-3 (ix), #0x00
                            381 ;src/main.c:95: if (a->energy + a->defense < a->max_energy)
   023A DD 4E 04      [19]  382 	ld	c,4 (ix)
   023D DD 46 05      [19]  383 	ld	b,5 (ix)
   0240 FD 21 0A 00   [14]  384 	ld	iy, #0x000a
   0244 FD 09         [15]  385 	add	iy, bc
   0246 FD 7E 00      [19]  386 	ld	a, 0 (iy)
   0249 DD 77 FF      [19]  387 	ld	-1 (ix), a
   024C 5F            [ 4]  388 	ld	e, a
   024D 16 00         [ 7]  389 	ld	d, #0x00
   024F 69            [ 4]  390 	ld	l, c
   0250 60            [ 4]  391 	ld	h, b
   0251 C5            [11]  392 	push	bc
   0252 01 0D 00      [10]  393 	ld	bc, #0x000d
   0255 09            [11]  394 	add	hl, bc
   0256 C1            [10]  395 	pop	bc
   0257 7E            [ 7]  396 	ld	a, (hl)
   0258 DD 77 FE      [19]  397 	ld	-2 (ix), a
   025B 6F            [ 4]  398 	ld	l, a
   025C 26 00         [ 7]  399 	ld	h, #0x00
   025E 19            [11]  400 	add	hl,de
   025F EB            [ 4]  401 	ex	de,hl
   0260 69            [ 4]  402 	ld	l, c
   0261 60            [ 4]  403 	ld	h, b
   0262 C5            [11]  404 	push	bc
   0263 01 0B 00      [10]  405 	ld	bc, #0x000b
   0266 09            [11]  406 	add	hl, bc
   0267 C1            [10]  407 	pop	bc
   0268 6E            [ 7]  408 	ld	l, (hl)
   0269 26 00         [ 7]  409 	ld	h, #0x00
   026B 7B            [ 4]  410 	ld	a, e
   026C 95            [ 4]  411 	sub	a, l
   026D 7A            [ 4]  412 	ld	a, d
   026E 9C            [ 4]  413 	sbc	a, h
   026F E2r74r02      [10]  414 	jp	PO, 00109$
   0272 EE 80         [ 7]  415 	xor	a, #0x80
   0274                     416 00109$:
   0274 F2r7Dr02      [10]  417 	jp	P, 00102$
                            418 ;src/main.c:96: healed = a->defense;
   0277 DD 5E FE      [19]  419 	ld	e, -2 (ix)
   027A DD 73 FD      [19]  420 	ld	-3 (ix), e
   027D                     421 00102$:
                            422 ;src/main.c:98: a->energy = a->energy + healed;
   027D DD 7E FF      [19]  423 	ld	a, -1 (ix)
   0280 DD 86 FD      [19]  424 	add	a, -3 (ix)
   0283 FD 77 00      [19]  425 	ld	0 (iy), a
                            426 ;src/main.c:100: sprintf(temp, "%s heals %02d.",a->name, healed);
   0286 DD 5E FD      [19]  427 	ld	e, -3 (ix)
   0289 16 00         [ 7]  428 	ld	d, #0x00
   028B 21 00 00      [10]  429 	ld	hl, #0x0000
   028E 39            [11]  430 	add	hl, sp
   028F E5            [11]  431 	push	hl
   0290 FD E1         [14]  432 	pop	iy
   0292 E5            [11]  433 	push	hl
   0293 D5            [11]  434 	push	de
   0294 C5            [11]  435 	push	bc
   0295 01rB2r02      [10]  436 	ld	bc, #___str_5
   0298 C5            [11]  437 	push	bc
   0299 FD E5         [15]  438 	push	iy
   029B CDr00r00      [17]  439 	call	_sprintf
   029E 21 08 00      [10]  440 	ld	hl, #8
   02A1 39            [11]  441 	add	hl, sp
   02A2 F9            [ 6]  442 	ld	sp, hl
   02A3 01 01 00      [10]  443 	ld	bc, #0x0001
   02A6 C5            [11]  444 	push	bc
   02A7 CDr00r00      [17]  445 	call	_cpct_setDrawCharM1
   02AA CDr0Ar01      [17]  446 	call	_showConsole
   02AD DD F9         [10]  447 	ld	sp,ix
   02AF DD E1         [14]  448 	pop	ix
   02B1 C9            [10]  449 	ret
   02B2                     450 ___str_5:
   02B2 25 73 20 68 65 61   451 	.ascii "%s heals %02d."
        6C 73 20 25 30 32
        64 2E
   02C0 00                  452 	.db 0x00
                            453 ;src/main.c:107: void game(){
                            454 ;	---------------------------------
                            455 ; Function game
                            456 ; ---------------------------------
   02C1                     457 _game::
                            458 ;src/main.c:108: while (player.energy) {
   02C1                     459 00124$:
   02C1 3Ar0Ar00      [13]  460 	ld	a, (#(_player + 0x000a) + 0)
   02C4 B7            [ 4]  461 	or	a, a
   02C5 C8            [11]  462 	ret	Z
                            463 ;src/main.c:109: initGoblin();
   02C6 CDr2Cr00      [17]  464 	call	_initGoblin
                            465 ;src/main.c:110: showConsole("A GOBLIN APPEARS.");
   02C9 21r6Fr03      [10]  466 	ld	hl, #___str_6
   02CC E5            [11]  467 	push	hl
   02CD CDr0Ar01      [17]  468 	call	_showConsole
   02D0 F1            [10]  469 	pop	af
                            470 ;src/main.c:112: while (player.energy && goblin.energy) {
   02D1                     471 00121$:
   02D1 3Ar0Ar00      [13]  472 	ld	a, (#(_player + 0x000a) + 0)
   02D4 B7            [ 4]  473 	or	a, a
   02D5 28 EA         [12]  474 	jr	Z,00124$
   02D7 3Ar18r00      [13]  475 	ld	a, (#(_goblin + 0x000a) + 0)
   02DA B7            [ 4]  476 	or	a, a
   02DB 28 E4         [12]  477 	jr	Z,00124$
                            478 ;src/main.c:114: showConsole("ACTION (A/D)?");
   02DD 21r81r03      [10]  479 	ld	hl, #___str_7
   02E0 E5            [11]  480 	push	hl
   02E1 CDr0Ar01      [17]  481 	call	_showConsole
   02E4 F1            [10]  482 	pop	af
                            483 ;src/main.c:115: do 
   02E5                     484 00102$:
                            485 ;src/main.c:116: cpct_scanKeyboard_f();
   02E5 CDr00r00      [17]  486 	call	_cpct_scanKeyboard_f
                            487 ;src/main.c:117: while (!cpct_isKeyPressed(Key_A) && !cpct_isKeyPressed(Key_D));
   02E8 21 08 20      [10]  488 	ld	hl, #0x2008
   02EB CDr00r00      [17]  489 	call	_cpct_isKeyPressed
   02EE 7D            [ 4]  490 	ld	a, l
   02EF B7            [ 4]  491 	or	a, a
   02F0 20 0A         [12]  492 	jr	NZ,00104$
   02F2 21 07 20      [10]  493 	ld	hl, #0x2007
   02F5 CDr00r00      [17]  494 	call	_cpct_isKeyPressed
   02F8 7D            [ 4]  495 	ld	a, l
   02F9 B7            [ 4]  496 	or	a, a
   02FA 28 E9         [12]  497 	jr	Z,00102$
   02FC                     498 00104$:
                            499 ;src/main.c:120: if (cpct_isKeyPressed(Key_A)) {
   02FC 21 08 20      [10]  500 	ld	hl, #0x2008
   02FF CDr00r00      [17]  501 	call	_cpct_isKeyPressed
   0302 7D            [ 4]  502 	ld	a, l
   0303 B7            [ 4]  503 	or	a, a
   0304 28 0D         [12]  504 	jr	Z,00106$
                            505 ;src/main.c:121: attack(&player, &goblin);
   0306 21r0Er00      [10]  506 	ld	hl, #_goblin
   0309 E5            [11]  507 	push	hl
   030A 21r00r00      [10]  508 	ld	hl, #_player
   030D E5            [11]  509 	push	hl
   030E CDrA4r01      [17]  510 	call	_attack
   0311 F1            [10]  511 	pop	af
   0312 F1            [10]  512 	pop	af
   0313                     513 00106$:
                            514 ;src/main.c:124: if (cpct_isKeyPressed(Key_D)) {
   0313 21 07 20      [10]  515 	ld	hl, #0x2007
   0316 CDr00r00      [17]  516 	call	_cpct_isKeyPressed
   0319 7D            [ 4]  517 	ld	a, l
   031A B7            [ 4]  518 	or	a, a
   031B 28 08         [12]  519 	jr	Z,00108$
                            520 ;src/main.c:125: defense(&player);
   031D 21r00r00      [10]  521 	ld	hl, #_player
   0320 E5            [11]  522 	push	hl
   0321 CDr29r02      [17]  523 	call	_defense
   0324 F1            [10]  524 	pop	af
   0325                     525 00108$:
                            526 ;src/main.c:131: if (goblin.energy) {
   0325 3Ar18r00      [13]  527 	ld	a, (#(_goblin + 0x000a) + 0)
   0328 B7            [ 4]  528 	or	a, a
   0329 28 21         [12]  529 	jr	Z,00113$
                            530 ;src/main.c:132: if (cpct_rand()%4) {// 75% of attack
   032B CDr00r00      [17]  531 	call	_cpct_getRandom_mxor_u8
   032E 7D            [ 4]  532 	ld	a, l
   032F E6 03         [ 7]  533 	and	a, #0x03
   0331 28 0F         [12]  534 	jr	Z,00110$
                            535 ;src/main.c:133: attack(&goblin,&player);
   0333 21r00r00      [10]  536 	ld	hl, #_player
   0336 E5            [11]  537 	push	hl
   0337 21r0Er00      [10]  538 	ld	hl, #_goblin
   033A E5            [11]  539 	push	hl
   033B CDrA4r01      [17]  540 	call	_attack
   033E F1            [10]  541 	pop	af
   033F F1            [10]  542 	pop	af
   0340 18 12         [12]  543 	jr	00114$
   0342                     544 00110$:
                            545 ;src/main.c:135: defense(&goblin);
   0342 21r0Er00      [10]  546 	ld	hl, #_goblin
   0345 E5            [11]  547 	push	hl
   0346 CDr29r02      [17]  548 	call	_defense
   0349 F1            [10]  549 	pop	af
   034A 18 08         [12]  550 	jr	00114$
   034C                     551 00113$:
                            552 ;src/main.c:138: showConsole("YOU KILLED THE GOBLIN.");
   034C 21r8Fr03      [10]  553 	ld	hl, #___str_8
   034F E5            [11]  554 	push	hl
   0350 CDr0Ar01      [17]  555 	call	_showConsole
   0353 F1            [10]  556 	pop	af
   0354                     557 00114$:
                            558 ;src/main.c:141: if (!player.energy){
   0354 3Ar0Ar00      [13]  559 	ld	a, (#(_player + 0x000a) + 0)
   0357 B7            [ 4]  560 	or	a, a
   0358 20 08         [12]  561 	jr	NZ,00117$
                            562 ;src/main.c:142: showConsole("YOU DIED.");
   035A 21rA6r03      [10]  563 	ld	hl, #___str_9
   035D E5            [11]  564 	push	hl
   035E CDr0Ar01      [17]  565 	call	_showConsole
   0361 F1            [10]  566 	pop	af
                            567 ;src/main.c:145: while (cpct_isAnyKeyPressed_f ()) { //Asegurarnos que se ha dejado de pulsar la tecla anterior 
   0362                     568 00117$:
   0362 CDr00r00      [17]  569 	call	_cpct_isAnyKeyPressed_f
   0365 7D            [ 4]  570 	ld	a, l
   0366 B7            [ 4]  571 	or	a, a
   0367 CArD1r02      [10]  572 	jp	Z, 00121$
                            573 ;src/main.c:146: cpct_scanKeyboard_f();
   036A CDr00r00      [17]  574 	call	_cpct_scanKeyboard_f
   036D 18 F3         [12]  575 	jr	00117$
   036F                     576 ___str_6:
   036F 41 20 47 4F 42 4C   577 	.ascii "A GOBLIN APPEARS."
        49 4E 20 41 50 50
        45 41 52 53 2E
   0380 00                  578 	.db 0x00
   0381                     579 ___str_7:
   0381 41 43 54 49 4F 4E   580 	.ascii "ACTION (A/D)?"
        20 28 41 2F 44 29
        3F
   038E 00                  581 	.db 0x00
   038F                     582 ___str_8:
   038F 59 4F 55 20 4B 49   583 	.ascii "YOU KILLED THE GOBLIN."
        4C 4C 45 44 20 54
        48 45 20 47 4F 42
        4C 49 4E 2E
   03A5 00                  584 	.db 0x00
   03A6                     585 ___str_9:
   03A6 59 4F 55 20 44 49   586 	.ascii "YOU DIED."
        45 44 2E
   03AF 00                  587 	.db 0x00
                            588 ;src/main.c:152: void main(void) {
                            589 ;	---------------------------------
                            590 ; Function main
                            591 ; ---------------------------------
   03B0                     592 _main::
                            593 ;src/main.c:156: cpct_disableFirmware();
   03B0 CDr00r00      [17]  594 	call	_cpct_disableFirmware
                            595 ;src/main.c:159: while (1) {
   03B3                     596 00107$:
                            597 ;src/main.c:160: cpct_setVideoMode(1);
   03B3 2E 01         [ 7]  598 	ld	l, #0x01
   03B5 CDr00r00      [17]  599 	call	_cpct_setVideoMode
                            600 ;src/main.c:161: cpct_clearScreen(0x00);
   03B8 21 00 40      [10]  601 	ld	hl, #0x4000
   03BB E5            [11]  602 	push	hl
   03BC AF            [ 4]  603 	xor	a, a
   03BD F5            [11]  604 	push	af
   03BE 33            [ 6]  605 	inc	sp
   03BF 26 C0         [ 7]  606 	ld	h, #0xc0
   03C1 E5            [11]  607 	push	hl
   03C2 CDr00r00      [17]  608 	call	_cpct_memset
                            609 ;src/main.c:162: cpct_setPalette(paletaM1,4);
   03C5 21 04 00      [10]  610 	ld	hl, #0x0004
   03C8 E5            [11]  611 	push	hl
   03C9 21r21r00      [10]  612 	ld	hl, #_paletaM1
   03CC E5            [11]  613 	push	hl
   03CD CDr00r00      [17]  614 	call	_cpct_setPalette
                            615 ;src/main.c:163: cpct_setBorder(HW_BLACK);
   03D0 21 10 14      [10]  616 	ld	hl, #0x1410
   03D3 E5            [11]  617 	push	hl
   03D4 CDr00r00      [17]  618 	call	_cpct_setPALColour
                            619 ;src/main.c:166: cpct_setDrawCharM1(3, 0);
   03D7 21 03 00      [10]  620 	ld	hl, #0x0003
   03DA E5            [11]  621 	push	hl
   03DB CDr00r00      [17]  622 	call	_cpct_setDrawCharM1
                            623 ;src/main.c:167: cpct_drawStringM1("RPG GAME", cpct_getScreenPtr(CPCT_VMEM_START, 0, 0));
   03DE 21 00 00      [10]  624 	ld	hl, #0x0000
   03E1 E5            [11]  625 	push	hl
   03E2 26 C0         [ 7]  626 	ld	h, #0xc0
   03E4 E5            [11]  627 	push	hl
   03E5 CDr00r00      [17]  628 	call	_cpct_getScreenPtr
   03E8 01r43r04      [10]  629 	ld	bc, #___str_10+0
   03EB E5            [11]  630 	push	hl
   03EC C5            [11]  631 	push	bc
   03ED CDr00r00      [17]  632 	call	_cpct_drawStringM1
                            633 ;src/main.c:168: cpct_drawStringM1("PRESS ANY KEY TO START", cpct_getScreenPtr(CPCT_VMEM_START, 0, 20));
   03F0 21 00 14      [10]  634 	ld	hl, #0x1400
   03F3 E5            [11]  635 	push	hl
   03F4 26 C0         [ 7]  636 	ld	h, #0xc0
   03F6 E5            [11]  637 	push	hl
   03F7 CDr00r00      [17]  638 	call	_cpct_getScreenPtr
   03FA 01r4Cr04      [10]  639 	ld	bc, #___str_11+0
   03FD E5            [11]  640 	push	hl
   03FE C5            [11]  641 	push	bc
   03FF CDr00r00      [17]  642 	call	_cpct_drawStringM1
                            643 ;src/main.c:172: do {
   0402 06 00         [ 7]  644 	ld	b, #0x00
   0404                     645 00101$:
                            646 ;src/main.c:173: cpct_scanKeyboard_f();
   0404 C5            [11]  647 	push	bc
   0405 CDr00r00      [17]  648 	call	_cpct_scanKeyboard_f
   0408 C1            [10]  649 	pop	bc
                            650 ;src/main.c:174: semilla++;
   0409 04            [ 4]  651 	inc	b
                            652 ;src/main.c:176: while (!cpct_isAnyKeyPressed_f());
   040A C5            [11]  653 	push	bc
   040B CDr00r00      [17]  654 	call	_cpct_isAnyKeyPressed_f
   040E C1            [10]  655 	pop	bc
   040F 7D            [ 4]  656 	ld	a, l
   0410 B7            [ 4]  657 	or	a, a
   0411 28 F1         [12]  658 	jr	Z,00101$
                            659 ;src/main.c:177: cpct_clearScreen(0x00);
   0413 48            [ 4]  660 	ld	c, b
   0414 C5            [11]  661 	push	bc
   0415 21 00 40      [10]  662 	ld	hl, #0x4000
   0418 E5            [11]  663 	push	hl
   0419 AF            [ 4]  664 	xor	a, a
   041A F5            [11]  665 	push	af
   041B 33            [ 6]  666 	inc	sp
   041C 26 C0         [ 7]  667 	ld	h, #0xc0
   041E E5            [11]  668 	push	hl
   041F CDr00r00      [17]  669 	call	_cpct_memset
   0422 C1            [10]  670 	pop	bc
                            671 ;src/main.c:179: cursorPrint = 30;
   0423 21r1Cr00      [10]  672 	ld	hl,#_cursorPrint + 0
   0426 36 1E         [10]  673 	ld	(hl), #0x1e
                            674 ;src/main.c:180: if (!semilla)
   0428 78            [ 4]  675 	ld	a, b
   0429 B7            [ 4]  676 	or	a, a
   042A 20 02         [12]  677 	jr	NZ,00105$
                            678 ;src/main.c:181: semilla = 1;
   042C 0E 01         [ 7]  679 	ld	c, #0x01
   042E                     680 00105$:
                            681 ;src/main.c:183: cpct_srand8(semilla);
   042E 26 00         [ 7]  682 	ld	h, #0x00
   0430 11 00 00      [10]  683 	ld	de,#0x0000
   0433 69            [ 4]  684 	ld	l, c
   0434 CDr00r00      [17]  685 	call	_cpct_setSeed_mxor
   0437 CDr00r00      [17]  686 	call	_cpct_restoreState_mxor_u8
                            687 ;src/main.c:184: initPlayer();
   043A CDr00r00      [17]  688 	call	_initPlayer
                            689 ;src/main.c:185: game();
   043D CDrC1r02      [17]  690 	call	_game
   0440 C3rB3r03      [10]  691 	jp	00107$
   0443                     692 ___str_10:
   0443 52 50 47 20 47 41   693 	.ascii "RPG GAME"
        4D 45
   044B 00                  694 	.db 0x00
   044C                     695 ___str_11:
   044C 50 52 45 53 53 20   696 	.ascii "PRESS ANY KEY TO START"
        41 4E 59 20 4B 45
        59 20 54 4F 20 53
        54 41 52 54
   0462 00                  697 	.db 0x00
                            698 	.area _CODE
                            699 	.area _INITIALIZER
                            700 	.area _CABS (ABS)

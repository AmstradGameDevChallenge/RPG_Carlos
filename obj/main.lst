                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (CYGWIN)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _game
                             13 	.globl _defense
                             14 	.globl _attack
                             15 	.globl _showConsole
                             16 	.globl _initGoblin
                             17 	.globl _juego
                             18 	.globl _pausaTecladoLibre
                             19 	.globl _sprintf
                             20 	.globl _cpct_restoreState_mxor_u8
                             21 	.globl _cpct_setSeed_mxor
                             22 	.globl _cpct_getRandom_mxor_u8
                             23 	.globl _cpct_getScreenPtr
                             24 	.globl _cpct_setPALColour
                             25 	.globl _cpct_setPalette
                             26 	.globl _cpct_setVideoMode
                             27 	.globl _cpct_drawStringM1
                             28 	.globl _cpct_setDrawCharM1
                             29 	.globl _cpct_isAnyKeyPressed_f
                             30 	.globl _cpct_isKeyPressed
                             31 	.globl _cpct_scanKeyboard_f
                             32 	.globl _cpct_memset
                             33 	.globl _cpct_disableFirmware
                             34 	.globl _cursorPrint
                             35 	.globl _goblin
                             36 	.globl _player
                             37 	.globl _nivel
                             38 	.globl _entidad
                             39 	.globl _paletaM1
                             40 ;--------------------------------------------------------
                             41 ; special function registers
                             42 ;--------------------------------------------------------
                             43 ;--------------------------------------------------------
                             44 ; ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DATA
   0000                      47 _entidad::
   0000                      48 	.ds 57
   0039                      49 _nivel::
   0039                      50 	.ds 1
   003A                      51 _player::
   003A                      52 	.ds 19
   004D                      53 _goblin::
   004D                      54 	.ds 19
   0060                      55 _cursorPrint::
   0060                      56 	.ds 1
                             57 ;--------------------------------------------------------
                             58 ; ram data
                             59 ;--------------------------------------------------------
                             60 	.area _INITIALIZED
                             61 ;--------------------------------------------------------
                             62 ; absolute external ram data
                             63 ;--------------------------------------------------------
                             64 	.area _DABS (ABS)
                             65 ;--------------------------------------------------------
                             66 ; global & static initialisations
                             67 ;--------------------------------------------------------
                             68 	.area _HOME
                             69 	.area _GSINIT
                             70 	.area _GSFINAL
                             71 	.area _GSINIT
                             72 ;--------------------------------------------------------
                             73 ; Home
                             74 ;--------------------------------------------------------
                             75 	.area _HOME
                             76 	.area _HOME
                             77 ;--------------------------------------------------------
                             78 ; code
                             79 ;--------------------------------------------------------
                             80 	.area _CODE
                             81 ;src/main.c:42: void initGoblin(){
                             82 ;	---------------------------------
                             83 ; Function initGoblin
                             84 ; ---------------------------------
   0000                      85 _initGoblin::
                             86 ;src/main.c:43: strcpy(goblin.name,"GOBLIN");
   0000 11r4Dr00      [10]   87 	ld	de, #_goblin
   0003 21r2Fr00      [10]   88 	ld	hl, #___str_0
   0006 AF            [ 4]   89 	xor	a, a
   0007                      90 00103$:
   0007 BE            [ 7]   91 	cp	a, (hl)
   0008 ED A0         [16]   92 	ldi
   000A 20 FB         [12]   93 	jr	NZ, 00103$
                             94 ;src/main.c:44: goblin.max_energy = 90;
   000C 21r58r00      [10]   95 	ld	hl, #_goblin + 11
   000F 36 5A         [10]   96 	ld	(hl), #0x5a
                             97 ;src/main.c:45: goblin.energy = goblin.max_energy;
   0011 01r57r00      [10]   98 	ld	bc, #_goblin + 10
   0014 7E            [ 7]   99 	ld	a, (hl)
   0015 02            [ 7]  100 	ld	(bc), a
                            101 ;src/main.c:46: goblin.attack = 20;
   0016 21r59r00      [10]  102 	ld	hl, #(_goblin + 0x000c)
   0019 36 14         [10]  103 	ld	(hl), #0x14
                            104 ;src/main.c:47: goblin.force = 3;
   001B 21r5Ar00      [10]  105 	ld	hl, #(_goblin + 0x000d)
   001E 36 03         [10]  106 	ld	(hl), #0x03
                            107 ;src/main.c:48: goblin.defense = 10;
   0020 21r5Br00      [10]  108 	ld	hl, #(_goblin + 0x000e)
   0023 36 0A         [10]  109 	ld	(hl), #0x0a
                            110 ;src/main.c:49: goblin.pos_x = 7;
   0025 21r5Cr00      [10]  111 	ld	hl, #(_goblin + 0x000f)
   0028 36 07         [10]  112 	ld	(hl), #0x07
   002A C9            [10]  113 	ret
   002B                     114 _paletaM1:
   002B 54                  115 	.db #0x54	; 84	'T'
   002C 40                  116 	.db #0x40	; 64
   002D 4B                  117 	.db #0x4b	; 75	'K'
   002E 44                  118 	.db #0x44	; 68	'D'
   002F                     119 ___str_0:
   002F 47 4F 42 4C 49 4E   120 	.ascii "GOBLIN"
   0035 00                  121 	.db 0x00
                            122 ;src/main.c:55: void showConsole  (void* string) {
                            123 ;	---------------------------------
                            124 ; Function showConsole
                            125 ; ---------------------------------
   0036                     126 _showConsole::
                            127 ;src/main.c:56: if (cursorPrint > 190){
   0036 3E BE         [ 7]  128 	ld	a, #0xbe
   0038 FD 21r60r00   [14]  129 	ld	iy, #_cursorPrint
   003C FD 96 00      [19]  130 	sub	a, 0 (iy)
   003F 30 12         [12]  131 	jr	NC,00102$
                            132 ;src/main.c:57: cpct_clearScreen(0x00);
   0041 21 00 40      [10]  133 	ld	hl, #0x4000
   0044 E5            [11]  134 	push	hl
   0045 AF            [ 4]  135 	xor	a, a
   0046 F5            [11]  136 	push	af
   0047 33            [ 6]  137 	inc	sp
   0048 26 C0         [ 7]  138 	ld	h, #0xc0
   004A E5            [11]  139 	push	hl
   004B CDr00r00      [17]  140 	call	_cpct_memset
                            141 ;src/main.c:58: cursorPrint = 44;
   004E 21r60r00      [10]  142 	ld	hl,#_cursorPrint + 0
   0051 36 2C         [10]  143 	ld	(hl), #0x2c
   0053                     144 00102$:
                            145 ;src/main.c:61: cpct_drawStringM1(string, cpct_getScreenPtr(CPCT_VMEM_START, 0, cursorPrint));
   0053 3Ar60r00      [13]  146 	ld	a, (_cursorPrint)
   0056 F5            [11]  147 	push	af
   0057 33            [ 6]  148 	inc	sp
   0058 AF            [ 4]  149 	xor	a, a
   0059 F5            [11]  150 	push	af
   005A 33            [ 6]  151 	inc	sp
   005B 21 00 C0      [10]  152 	ld	hl, #0xc000
   005E E5            [11]  153 	push	hl
   005F CDr00r00      [17]  154 	call	_cpct_getScreenPtr
   0062 D1            [10]  155 	pop	de
   0063 C1            [10]  156 	pop	bc
   0064 C5            [11]  157 	push	bc
   0065 D5            [11]  158 	push	de
   0066 E5            [11]  159 	push	hl
   0067 C5            [11]  160 	push	bc
   0068 CDr00r00      [17]  161 	call	_cpct_drawStringM1
                            162 ;src/main.c:62: cursorPrint +=8;
   006B 21r60r00      [10]  163 	ld	hl, #_cursorPrint
   006E 7E            [ 7]  164 	ld	a, (hl)
   006F C6 08         [ 7]  165 	add	a, #0x08
   0071 77            [ 7]  166 	ld	(hl), a
   0072 C9            [10]  167 	ret
                            168 ;src/main.c:67: void attack(TStats *a, TStats *b) {
                            169 ;	---------------------------------
                            170 ; Function attack
                            171 ; ---------------------------------
   0073                     172 _attack::
   0073 DD E5         [15]  173 	push	ix
   0075 DD 21 00 00   [14]  174 	ld	ix,#0
   0079 DD 39         [15]  175 	add	ix,sp
   007B 21 D7 FF      [10]  176 	ld	hl, #-41
   007E 39            [11]  177 	add	hl, sp
   007F F9            [ 6]  178 	ld	sp, hl
                            179 ;src/main.c:70: ataque = a->attack + (2*(cpct_rand()%a->force)) - a->force;
   0080 DD 4E 04      [19]  180 	ld	c,4 (ix)
   0083 DD 46 05      [19]  181 	ld	b,5 (ix)
   0086 C5            [11]  182 	push	bc
   0087 FD E1         [14]  183 	pop	iy
   0089 FD 7E 0C      [19]  184 	ld	a, 12 (iy)
   008C DD 77 FF      [19]  185 	ld	-1 (ix), a
   008F C5            [11]  186 	push	bc
   0090 CDr00r00      [17]  187 	call	_cpct_getRandom_mxor_u8
   0093 55            [ 4]  188 	ld	d, l
   0094 C1            [10]  189 	pop	bc
   0095 C5            [11]  190 	push	bc
   0096 FD E1         [14]  191 	pop	iy
   0098 FD 66 0D      [19]  192 	ld	h, 13 (iy)
   009B E5            [11]  193 	push	hl
   009C C5            [11]  194 	push	bc
   009D 6A            [ 4]  195 	ld	l, d
   009E E5            [11]  196 	push	hl
   009F CDr00r00      [17]  197 	call	__moduchar
   00A2 F1            [10]  198 	pop	af
   00A3 5D            [ 4]  199 	ld	e, l
   00A4 C1            [10]  200 	pop	bc
   00A5 E1            [10]  201 	pop	hl
   00A6 CB 23         [ 8]  202 	sla	e
   00A8 DD 7E FF      [19]  203 	ld	a, -1 (ix)
   00AB 83            [ 4]  204 	add	a, e
   00AC 94            [ 4]  205 	sub	a, h
   00AD 5F            [ 4]  206 	ld	e, a
                            207 ;src/main.c:73: if (ataque < b->energy) 
   00AE DD 6E 06      [19]  208 	ld	l,6 (ix)
   00B1 DD 66 07      [19]  209 	ld	h,7 (ix)
   00B4 D5            [11]  210 	push	de
   00B5 11 0A 00      [10]  211 	ld	de, #0x000a
   00B8 19            [11]  212 	add	hl, de
   00B9 D1            [10]  213 	pop	de
   00BA 56            [ 7]  214 	ld	d, (hl)
   00BB 7B            [ 4]  215 	ld	a, e
   00BC 92            [ 4]  216 	sub	a, d
   00BD 30 05         [12]  217 	jr	NC,00102$
                            218 ;src/main.c:74: b->energy = b->energy - ataque;
   00BF 7A            [ 4]  219 	ld	a, d
   00C0 93            [ 4]  220 	sub	a, e
   00C1 77            [ 7]  221 	ld	(hl), a
   00C2 18 02         [12]  222 	jr	00103$
   00C4                     223 00102$:
                            224 ;src/main.c:76: b->energy = 0;
   00C4 36 00         [10]  225 	ld	(hl), #0x00
   00C6                     226 00103$:
                            227 ;src/main.c:78: sprintf(temp, "%s attacks %02d.",a->name, ataque);
   00C6 16 00         [ 7]  228 	ld	d, #0x00
   00C8 21 00 00      [10]  229 	ld	hl, #0x0000
   00CB 39            [11]  230 	add	hl, sp
   00CC E5            [11]  231 	push	hl
   00CD FD E1         [14]  232 	pop	iy
   00CF E5            [11]  233 	push	hl
   00D0 D5            [11]  234 	push	de
   00D1 C5            [11]  235 	push	bc
   00D2 01rF6r00      [10]  236 	ld	bc, #___str_1
   00D5 C5            [11]  237 	push	bc
   00D6 FD E5         [15]  238 	push	iy
   00D8 CDr00r00      [17]  239 	call	_sprintf
   00DB 21 08 00      [10]  240 	ld	hl, #8
   00DE 39            [11]  241 	add	hl, sp
   00DF F9            [ 6]  242 	ld	sp, hl
   00E0 01 02 00      [10]  243 	ld	bc, #0x0002
   00E3 C5            [11]  244 	push	bc
   00E4 CDr00r00      [17]  245 	call	_cpct_setDrawCharM1
   00E7 CDr36r00      [17]  246 	call	_showConsole
                            247 ;src/main.c:82: cpct_setDrawCharM1(3, 0);
   00EA 21 03 00      [10]  248 	ld	hl, #0x0003
   00ED E3            [19]  249 	ex	(sp),hl
   00EE CDr00r00      [17]  250 	call	_cpct_setDrawCharM1
   00F1 DD F9         [10]  251 	ld	sp, ix
   00F3 DD E1         [14]  252 	pop	ix
   00F5 C9            [10]  253 	ret
   00F6                     254 ___str_1:
   00F6 25 73 20 61 74 74   255 	.ascii "%s attacks %02d."
        61 63 6B 73 20 25
        30 32 64 2E
   0106 00                  256 	.db 0x00
                            257 ;src/main.c:85: void defense(TStats *a) {
                            258 ;	---------------------------------
                            259 ; Function defense
                            260 ; ---------------------------------
   0107                     261 _defense::
   0107 DD E5         [15]  262 	push	ix
   0109 DD 21 00 00   [14]  263 	ld	ix,#0
   010D DD 39         [15]  264 	add	ix,sp
   010F 21 D5 FF      [10]  265 	ld	hl, #-43
   0112 39            [11]  266 	add	hl, sp
   0113 F9            [ 6]  267 	ld	sp, hl
                            268 ;src/main.c:88: healed = 0;
   0114 DD 36 D5 00   [19]  269 	ld	-43 (ix), #0x00
                            270 ;src/main.c:89: if (a->energy + a->defense < a->max_energy)
   0118 DD 4E 04      [19]  271 	ld	c,4 (ix)
   011B DD 46 05      [19]  272 	ld	b,5 (ix)
   011E FD 21 0A 00   [14]  273 	ld	iy, #0x000a
   0122 FD 09         [15]  274 	add	iy, bc
   0124 FD 7E 00      [19]  275 	ld	a, 0 (iy)
   0127 DD 77 FF      [19]  276 	ld	-1 (ix), a
   012A 5F            [ 4]  277 	ld	e, a
   012B 16 00         [ 7]  278 	ld	d, #0x00
   012D 69            [ 4]  279 	ld	l, c
   012E 60            [ 4]  280 	ld	h, b
   012F C5            [11]  281 	push	bc
   0130 01 0E 00      [10]  282 	ld	bc, #0x000e
   0133 09            [11]  283 	add	hl, bc
   0134 C1            [10]  284 	pop	bc
   0135 7E            [ 7]  285 	ld	a, (hl)
   0136 DD 77 FE      [19]  286 	ld	-2 (ix), a
   0139 6F            [ 4]  287 	ld	l, a
   013A 26 00         [ 7]  288 	ld	h, #0x00
   013C 19            [11]  289 	add	hl,de
   013D EB            [ 4]  290 	ex	de,hl
   013E 69            [ 4]  291 	ld	l, c
   013F 60            [ 4]  292 	ld	h, b
   0140 C5            [11]  293 	push	bc
   0141 01 0B 00      [10]  294 	ld	bc, #0x000b
   0144 09            [11]  295 	add	hl, bc
   0145 C1            [10]  296 	pop	bc
   0146 6E            [ 7]  297 	ld	l, (hl)
   0147 26 00         [ 7]  298 	ld	h, #0x00
   0149 7B            [ 4]  299 	ld	a, e
   014A 95            [ 4]  300 	sub	a, l
   014B 7A            [ 4]  301 	ld	a, d
   014C 9C            [ 4]  302 	sbc	a, h
   014D E2r52r01      [10]  303 	jp	PO, 00109$
   0150 EE 80         [ 7]  304 	xor	a, #0x80
   0152                     305 00109$:
   0152 F2r5Br01      [10]  306 	jp	P, 00102$
                            307 ;src/main.c:90: healed = a->defense;
   0155 DD 5E FE      [19]  308 	ld	e, -2 (ix)
   0158 DD 73 D5      [19]  309 	ld	-43 (ix), e
   015B                     310 00102$:
                            311 ;src/main.c:92: a->energy = a->energy + healed;
   015B DD 7E FF      [19]  312 	ld	a, -1 (ix)
   015E DD 86 D5      [19]  313 	add	a, -43 (ix)
   0161 FD 77 00      [19]  314 	ld	0 (iy), a
                            315 ;src/main.c:94: sprintf(temp, "%s heals %02d.",a->name, healed);
   0164 DD 5E D5      [19]  316 	ld	e, -43 (ix)
   0167 16 00         [ 7]  317 	ld	d, #0x00
   0169 21 01 00      [10]  318 	ld	hl, #0x0001
   016C 39            [11]  319 	add	hl, sp
   016D E5            [11]  320 	push	hl
   016E FD E1         [14]  321 	pop	iy
   0170 E5            [11]  322 	push	hl
   0171 D5            [11]  323 	push	de
   0172 C5            [11]  324 	push	bc
   0173 01r97r01      [10]  325 	ld	bc, #___str_2
   0176 C5            [11]  326 	push	bc
   0177 FD E5         [15]  327 	push	iy
   0179 CDr00r00      [17]  328 	call	_sprintf
   017C 21 08 00      [10]  329 	ld	hl, #8
   017F 39            [11]  330 	add	hl, sp
   0180 F9            [ 6]  331 	ld	sp, hl
   0181 01 01 00      [10]  332 	ld	bc, #0x0001
   0184 C5            [11]  333 	push	bc
   0185 CDr00r00      [17]  334 	call	_cpct_setDrawCharM1
   0188 CDr36r00      [17]  335 	call	_showConsole
                            336 ;src/main.c:98: cpct_setDrawCharM1(3, 0);
   018B 21 03 00      [10]  337 	ld	hl, #0x0003
   018E E3            [19]  338 	ex	(sp),hl
   018F CDr00r00      [17]  339 	call	_cpct_setDrawCharM1
   0192 DD F9         [10]  340 	ld	sp, ix
   0194 DD E1         [14]  341 	pop	ix
   0196 C9            [10]  342 	ret
   0197                     343 ___str_2:
   0197 25 73 20 68 65 61   344 	.ascii "%s heals %02d."
        6C 73 20 25 30 32
        64 2E
   01A5 00                  345 	.db 0x00
                            346 ;src/main.c:102: void game(){
                            347 ;	---------------------------------
                            348 ; Function game
                            349 ; ---------------------------------
   01A6                     350 _game::
                            351 ;src/main.c:105: while (player.energy) {
   01A6                     352 00118$:
   01A6 3Ar44r00      [13]  353 	ld	a,(#(_player + 0x000a) + 0)
   01A9 B7            [ 4]  354 	or	a, a
   01AA C8            [11]  355 	ret	Z
                            356 ;src/main.c:106: cpct_clearScreen(0x00);
   01AB 21 00 40      [10]  357 	ld	hl, #0x4000
   01AE E5            [11]  358 	push	hl
   01AF AF            [ 4]  359 	xor	a, a
   01B0 F5            [11]  360 	push	af
   01B1 33            [ 6]  361 	inc	sp
   01B2 26 C0         [ 7]  362 	ld	h, #0xc0
   01B4 E5            [11]  363 	push	hl
   01B5 CDr00r00      [17]  364 	call	_cpct_memset
                            365 ;src/main.c:107: cursorPrint = 44;
   01B8 21r60r00      [10]  366 	ld	hl,#_cursorPrint + 0
   01BB 36 2C         [10]  367 	ld	(hl), #0x2c
                            368 ;src/main.c:108: if (!goblin.energy) {
   01BD 3Ar57r00      [13]  369 	ld	a, (#_goblin + 10)
   01C0 B7            [ 4]  370 	or	a, a
   01C1 20 0B         [12]  371 	jr	NZ,00102$
                            372 ;src/main.c:109: initGoblin();
   01C3 CDr00r00      [17]  373 	call	_initGoblin
                            374 ;src/main.c:110: showConsole("A GOBLIN APPEARS.");
   01C6 21rA0r02      [10]  375 	ld	hl, #___str_3
   01C9 E5            [11]  376 	push	hl
   01CA CDr36r00      [17]  377 	call	_showConsole
   01CD F1            [10]  378 	pop	af
   01CE                     379 00102$:
                            380 ;src/main.c:115: showConsole("ACTION (O/P/D)?");
   01CE 21rB2r02      [10]  381 	ld	hl, #___str_4
   01D1 E5            [11]  382 	push	hl
   01D2 CDr36r00      [17]  383 	call	_showConsole
   01D5 F1            [10]  384 	pop	af
                            385 ;src/main.c:116: do 
   01D6                     386 00105$:
                            387 ;src/main.c:117: cpct_scanKeyboard_f();
   01D6 CDr00r00      [17]  388 	call	_cpct_scanKeyboard_f
                            389 ;src/main.c:118: while (!cpct_isKeyPressed(Key_O) && !cpct_isKeyPressed(Key_P) && !cpct_isKeyPressed(Key_D));
   01D9 21 04 04      [10]  390 	ld	hl, #0x0404
   01DC CDr00r00      [17]  391 	call	_cpct_isKeyPressed
   01DF 7D            [ 4]  392 	ld	a, l
   01E0 B7            [ 4]  393 	or	a, a
   01E1 20 14         [12]  394 	jr	NZ,00107$
   01E3 21 03 08      [10]  395 	ld	hl, #0x0803
   01E6 CDr00r00      [17]  396 	call	_cpct_isKeyPressed
   01E9 7D            [ 4]  397 	ld	a, l
   01EA B7            [ 4]  398 	or	a, a
   01EB 20 0A         [12]  399 	jr	NZ,00107$
   01ED 21 07 20      [10]  400 	ld	hl, #0x2007
   01F0 CDr00r00      [17]  401 	call	_cpct_isKeyPressed
   01F3 7D            [ 4]  402 	ld	a, l
   01F4 B7            [ 4]  403 	or	a, a
   01F5 28 DF         [12]  404 	jr	Z,00105$
   01F7                     405 00107$:
                            406 ;src/main.c:121: cpct_drawStringM1(" ", cpct_getScreenPtr(CPCT_VMEM_START, (player.pos_x)*2, 28));
   01F7 3Ar49r00      [13]  407 	ld	a, (#(_player + 0x000f) + 0)
   01FA 87            [ 4]  408 	add	a, a
   01FB 47            [ 4]  409 	ld	b, a
   01FC 3E 1C         [ 7]  410 	ld	a, #0x1c
   01FE F5            [11]  411 	push	af
   01FF 33            [ 6]  412 	inc	sp
   0200 C5            [11]  413 	push	bc
   0201 33            [ 6]  414 	inc	sp
   0202 21 00 C0      [10]  415 	ld	hl, #0xc000
   0205 E5            [11]  416 	push	hl
   0206 CDr00r00      [17]  417 	call	_cpct_getScreenPtr
   0209 E5            [11]  418 	push	hl
   020A 21rC2r02      [10]  419 	ld	hl, #___str_5
   020D E5            [11]  420 	push	hl
   020E CDr00r00      [17]  421 	call	_cpct_drawStringM1
                            422 ;src/main.c:122: cpct_drawStringM1(" ", cpct_getScreenPtr(CPCT_VMEM_START, (goblin.pos_x)*2, 28));
   0211 3Ar5Cr00      [13]  423 	ld	a, (#(_goblin + 0x000f) + 0)
   0214 87            [ 4]  424 	add	a, a
   0215 47            [ 4]  425 	ld	b, a
   0216 3E 1C         [ 7]  426 	ld	a, #0x1c
   0218 F5            [11]  427 	push	af
   0219 33            [ 6]  428 	inc	sp
   021A C5            [11]  429 	push	bc
   021B 33            [ 6]  430 	inc	sp
   021C 21 00 C0      [10]  431 	ld	hl, #0xc000
   021F E5            [11]  432 	push	hl
   0220 CDr00r00      [17]  433 	call	_cpct_getScreenPtr
   0223 E5            [11]  434 	push	hl
   0224 21rC2r02      [10]  435 	ld	hl, #___str_5
   0227 E5            [11]  436 	push	hl
   0228 CDr00r00      [17]  437 	call	_cpct_drawStringM1
                            438 ;src/main.c:125: if (cpct_isKeyPressed(Key_D)) {
   022B 21 07 20      [10]  439 	ld	hl, #0x2007
   022E CDr00r00      [17]  440 	call	_cpct_isKeyPressed
   0231 7D            [ 4]  441 	ld	a, l
   0232 B7            [ 4]  442 	or	a, a
   0233 28 08         [12]  443 	jr	Z,00109$
                            444 ;src/main.c:126: defense(&player);
   0235 21r3Ar00      [10]  445 	ld	hl, #_player
   0238 E5            [11]  446 	push	hl
   0239 CDr07r01      [17]  447 	call	_defense
   023C F1            [10]  448 	pop	af
   023D                     449 00109$:
                            450 ;src/main.c:130: cpct_drawStringM1("@", cpct_getScreenPtr(CPCT_VMEM_START, (player.pos_x)*2, 28));
   023D 3Ar49r00      [13]  451 	ld	a, (#(_player + 0x000f) + 0)
   0240 87            [ 4]  452 	add	a, a
   0241 47            [ 4]  453 	ld	b, a
   0242 3E 1C         [ 7]  454 	ld	a, #0x1c
   0244 F5            [11]  455 	push	af
   0245 33            [ 6]  456 	inc	sp
   0246 C5            [11]  457 	push	bc
   0247 33            [ 6]  458 	inc	sp
   0248 21 00 C0      [10]  459 	ld	hl, #0xc000
   024B E5            [11]  460 	push	hl
   024C CDr00r00      [17]  461 	call	_cpct_getScreenPtr
   024F E5            [11]  462 	push	hl
   0250 21rC4r02      [10]  463 	ld	hl, #___str_6
   0253 E5            [11]  464 	push	hl
   0254 CDr00r00      [17]  465 	call	_cpct_drawStringM1
                            466 ;src/main.c:136: cpct_drawStringM1("G", cpct_getScreenPtr(CPCT_VMEM_START, (goblin.pos_x)*2, 28));
   0257 3Ar5Cr00      [13]  467 	ld	a, (#(_goblin + 0x000f) + 0)
   025A 87            [ 4]  468 	add	a, a
   025B 47            [ 4]  469 	ld	b, a
   025C 3E 1C         [ 7]  470 	ld	a, #0x1c
   025E F5            [11]  471 	push	af
   025F 33            [ 6]  472 	inc	sp
   0260 C5            [11]  473 	push	bc
   0261 33            [ 6]  474 	inc	sp
   0262 21 00 C0      [10]  475 	ld	hl, #0xc000
   0265 E5            [11]  476 	push	hl
   0266 CDr00r00      [17]  477 	call	_cpct_getScreenPtr
   0269 E5            [11]  478 	push	hl
   026A 21rC6r02      [10]  479 	ld	hl, #___str_7
   026D E5            [11]  480 	push	hl
   026E CDr00r00      [17]  481 	call	_cpct_drawStringM1
                            482 ;src/main.c:138: if (!player.energy){
   0271 3Ar44r00      [13]  483 	ld	a, (#(_player + 0x000a) + 0)
   0274 B7            [ 4]  484 	or	a, a
   0275 20 08         [12]  485 	jr	NZ,00112$
                            486 ;src/main.c:139: showConsole("YOU DIED.");
   0277 21rC8r02      [10]  487 	ld	hl, #___str_8
   027A E5            [11]  488 	push	hl
   027B CDr36r00      [17]  489 	call	_showConsole
   027E F1            [10]  490 	pop	af
                            491 ;src/main.c:142: while (cpct_isAnyKeyPressed_f ()) { //Asegurarnos que se ha dejado de pulsar la tecla anterior 
   027F                     492 00112$:
   027F CDr00r00      [17]  493 	call	_cpct_isAnyKeyPressed_f
   0282 7D            [ 4]  494 	ld	a, l
   0283 B7            [ 4]  495 	or	a, a
   0284 28 05         [12]  496 	jr	Z,00114$
                            497 ;src/main.c:143: cpct_scanKeyboard_f();
   0286 CDr00r00      [17]  498 	call	_cpct_scanKeyboard_f
   0289 18 F4         [12]  499 	jr	00112$
   028B                     500 00114$:
                            501 ;src/main.c:146: showConsole("PRESS ANY KEY TO CONTINUE");
   028B 21rD2r02      [10]  502 	ld	hl, #___str_9
   028E E5            [11]  503 	push	hl
   028F CDr36r00      [17]  504 	call	_showConsole
   0292 F1            [10]  505 	pop	af
                            506 ;src/main.c:148: do 
   0293                     507 00115$:
                            508 ;src/main.c:149: cpct_scanKeyboard_f();
   0293 CDr00r00      [17]  509 	call	_cpct_scanKeyboard_f
                            510 ;src/main.c:150: while (!cpct_isAnyKeyPressed_f());
   0296 CDr00r00      [17]  511 	call	_cpct_isAnyKeyPressed_f
   0299 7D            [ 4]  512 	ld	a, l
   029A B7            [ 4]  513 	or	a, a
   029B 28 F6         [12]  514 	jr	Z,00115$
   029D C3rA6r01      [10]  515 	jp	00118$
   02A0                     516 ___str_3:
   02A0 41 20 47 4F 42 4C   517 	.ascii "A GOBLIN APPEARS."
        49 4E 20 41 50 50
        45 41 52 53 2E
   02B1 00                  518 	.db 0x00
   02B2                     519 ___str_4:
   02B2 41 43 54 49 4F 4E   520 	.ascii "ACTION (O/P/D)?"
        20 28 4F 2F 50 2F
        44 29 3F
   02C1 00                  521 	.db 0x00
   02C2                     522 ___str_5:
   02C2 20                  523 	.ascii " "
   02C3 00                  524 	.db 0x00
   02C4                     525 ___str_6:
   02C4 40                  526 	.ascii "@"
   02C5 00                  527 	.db 0x00
   02C6                     528 ___str_7:
   02C6 47                  529 	.ascii "G"
   02C7 00                  530 	.db 0x00
   02C8                     531 ___str_8:
   02C8 59 4F 55 20 44 49   532 	.ascii "YOU DIED."
        45 44 2E
   02D1 00                  533 	.db 0x00
   02D2                     534 ___str_9:
   02D2 50 52 45 53 53 20   535 	.ascii "PRESS ANY KEY TO CONTINUE"
        41 4E 59 20 4B 45
        59 20 54 4F 20 43
        4F 4E 54 49 4E 55
        45
   02EB 00                  536 	.db 0x00
                            537 ;src/main.c:154: void main(void) {
                            538 ;	---------------------------------
                            539 ; Function main
                            540 ; ---------------------------------
   02EC                     541 _main::
                            542 ;src/main.c:158: cpct_disableFirmware();
   02EC CDr00r00      [17]  543 	call	_cpct_disableFirmware
                            544 ;src/main.c:161: while (1) {
   02EF                     545 00107$:
                            546 ;src/main.c:162: cpct_setVideoMode(1);
   02EF 2E 01         [ 7]  547 	ld	l, #0x01
   02F1 CDr00r00      [17]  548 	call	_cpct_setVideoMode
                            549 ;src/main.c:163: cpct_clearScreen(0x00);
   02F4 21 00 40      [10]  550 	ld	hl, #0x4000
   02F7 E5            [11]  551 	push	hl
   02F8 AF            [ 4]  552 	xor	a, a
   02F9 F5            [11]  553 	push	af
   02FA 33            [ 6]  554 	inc	sp
   02FB 26 C0         [ 7]  555 	ld	h, #0xc0
   02FD E5            [11]  556 	push	hl
   02FE CDr00r00      [17]  557 	call	_cpct_memset
                            558 ;src/main.c:164: cpct_setPalette(paletaM1,4);
   0301 21 04 00      [10]  559 	ld	hl, #0x0004
   0304 E5            [11]  560 	push	hl
   0305 21r2Br00      [10]  561 	ld	hl, #_paletaM1
   0308 E5            [11]  562 	push	hl
   0309 CDr00r00      [17]  563 	call	_cpct_setPalette
                            564 ;src/main.c:165: cpct_setBorder(HW_BLACK);
   030C 21 10 14      [10]  565 	ld	hl, #0x1410
   030F E5            [11]  566 	push	hl
   0310 CDr00r00      [17]  567 	call	_cpct_setPALColour
                            568 ;src/main.c:168: cpct_setDrawCharM1(2, 0);
   0313 21 02 00      [10]  569 	ld	hl, #0x0002
   0316 E5            [11]  570 	push	hl
   0317 CDr00r00      [17]  571 	call	_cpct_setDrawCharM1
                            572 ;src/main.c:169: cpct_drawStringM1("RPG GAME", cpct_getScreenPtr(CPCT_VMEM_START, 0, 0));
   031A 21 00 00      [10]  573 	ld	hl, #0x0000
   031D E5            [11]  574 	push	hl
   031E 26 C0         [ 7]  575 	ld	h, #0xc0
   0320 E5            [11]  576 	push	hl
   0321 CDr00r00      [17]  577 	call	_cpct_getScreenPtr
   0324 01r6Fr03      [10]  578 	ld	bc, #___str_10+0
   0327 E5            [11]  579 	push	hl
   0328 C5            [11]  580 	push	bc
   0329 CDr00r00      [17]  581 	call	_cpct_drawStringM1
                            582 ;src/main.c:170: cpct_drawStringM1("PRESS ANY KEY TO START", cpct_getScreenPtr(CPCT_VMEM_START, 0, 20));
   032C 21 00 14      [10]  583 	ld	hl, #0x1400
   032F E5            [11]  584 	push	hl
   0330 26 C0         [ 7]  585 	ld	h, #0xc0
   0332 E5            [11]  586 	push	hl
   0333 CDr00r00      [17]  587 	call	_cpct_getScreenPtr
   0336 01r78r03      [10]  588 	ld	bc, #___str_11+0
   0339 E5            [11]  589 	push	hl
   033A C5            [11]  590 	push	bc
   033B CDr00r00      [17]  591 	call	_cpct_drawStringM1
                            592 ;src/main.c:173: pausaTecladoLibre();
   033E CDr00r00      [17]  593 	call	_pausaTecladoLibre
                            594 ;src/main.c:177: do {
   0341 0E 00         [ 7]  595 	ld	c, #0x00
   0343                     596 00101$:
                            597 ;src/main.c:178: cpct_scanKeyboard_f();
   0343 C5            [11]  598 	push	bc
   0344 CDr00r00      [17]  599 	call	_cpct_scanKeyboard_f
   0347 C1            [10]  600 	pop	bc
                            601 ;src/main.c:179: semilla++;
   0348 0C            [ 4]  602 	inc	c
                            603 ;src/main.c:181: while (!cpct_isAnyKeyPressed_f());
   0349 C5            [11]  604 	push	bc
   034A CDr00r00      [17]  605 	call	_cpct_isAnyKeyPressed_f
   034D C1            [10]  606 	pop	bc
   034E 7D            [ 4]  607 	ld	a, l
   034F B7            [ 4]  608 	or	a, a
   0350 28 F1         [12]  609 	jr	Z,00101$
                            610 ;src/main.c:184: if (!semilla)
   0352 79            [ 4]  611 	ld	a,c
   0353 6F            [ 4]  612 	ld	l,a
   0354 B7            [ 4]  613 	or	a, a
   0355 20 02         [12]  614 	jr	NZ,00105$
                            615 ;src/main.c:185: semilla = 1;
   0357 2E 01         [ 7]  616 	ld	l, #0x01
   0359                     617 00105$:
                            618 ;src/main.c:187: cpct_srand8(semilla);
   0359 26 00         [ 7]  619 	ld	h, #0x00
   035B 11 00 00      [10]  620 	ld	de,#0x0000
   035E CDr00r00      [17]  621 	call	_cpct_setSeed_mxor
   0361 CDr00r00      [17]  622 	call	_cpct_restoreState_mxor_u8
                            623 ;src/main.c:188: nivel = 1;
   0364 21r39r00      [10]  624 	ld	hl,#_nivel + 0
   0367 36 01         [10]  625 	ld	(hl), #0x01
                            626 ;src/main.c:190: juego();
   0369 CDr00r00      [17]  627 	call	_juego
   036C C3rEFr02      [10]  628 	jp	00107$
   036F                     629 ___str_10:
   036F 52 50 47 20 47 41   630 	.ascii "RPG GAME"
        4D 45
   0377 00                  631 	.db 0x00
   0378                     632 ___str_11:
   0378 50 52 45 53 53 20   633 	.ascii "PRESS ANY KEY TO START"
        41 4E 59 20 4B 45
        59 20 54 4F 20 53
        54 41 52 54
   038E 00                  634 	.db 0x00
                            635 	.area _CODE
                            636 	.area _INITIALIZER
                            637 	.area _CABS (ABS)
